Terminals unused in grammar

   DEFINE_TOK
   XOR_TOK
   BIT_AND_TOK
   BIT_OR_TOK
   RIGHT_SHIFT_TOK
   LEFT_SHIFT_TOK
   ERROR_TOK


State 138 conflicts: 1 shift/reduce
State 143 conflicts: 1 shift/reduce
State 144 conflicts: 1 shift/reduce
State 162 conflicts: 1 shift/reduce
State 193 conflicts: 1 shift/reduce


Grammar

    0 $accept: DEBUG $end

    1 DEBUG: START

    2 START: vardec START
    3      | funcdef START
    4      | %empty

    5 vardec: TYPE_TOK ID_TOK vardecex SEMICOLON_TOK
    6       | TYPE_TOK ID_TOK EQ_TOK exp2 vardecex SEMICOLON_TOK

    7 vardecex: vardecex COMMA_TOK ID_TOK
    8         | vardecex COMMA_TOK ID_TOK EQ_TOK exp2
    9         | %empty

   10 funcdef: TYPE_TOK ID_TOK LPAREN_TOK arglist RPAREN_TOK block
   11        | ID_TOK LPAREN_TOK arglist RPAREN_TOK block

   12 returnstatement: RETURN_TOK exp2 SEMICOLON_TOK

   13 arglist: TYPE_TOK ID_TOK arglistex
   14        | %empty

   15 arglistex: COMMA_TOK TYPE_TOK ID_TOK arglistex
   16          | COMMA_TOK TYPE_TOK ID_TOK

   17 funccall: ID_TOK LPAREN_TOK paramlist RPAREN_TOK SEMICOLON_TOK

   18 paramlist: exp COMMA_TOK paramlist
   19          | exp

   20 nestedblock: vardeclines estatements block estatements
   21            | vardeclines estatements

   22 estatements: statements
   23            | %empty

   24 $@1: %empty

   25 block: CURL_LPAREN_TOK $@1 nestedblock CURL_RPAREN_TOK

   26 vardeclines: vardeclines vardec
   27            | %empty

   28 nonfunctionblock: exp SEMICOLON_TOK
   29                 | ifstatement
   30                 | loopstatement
   31                 | returnstatement
   32                 | funccall
   33                 | block

   34 statements: exp SEMICOLON_TOK statements
   35           | ifstatement statements
   36           | loopstatement statements
   37           | returnstatement statements
   38           | funccall statements
   39           | switchstatement statements
   40           | exp SEMICOLON_TOK
   41           | ifstatement
   42           | loopstatement
   43           | returnstatement
   44           | funccall
   45           | switchstatement

   46 ifstatement: IF_TOK condexp nonfunctionblock ifstatementex
   47            | IF_TOK condexp nonfunctionblock ifstatementex ELSE_TOK nonfunctionblock

   48 ifstatementex: ELSEIF_TOK condexp nonfunctionblock ifstatementex
   49              | %empty

   50 switchstatement: SWITCH_TOK condexp switchblock

   51 switchblock: CURL_LPAREN_TOK vardeclines caseblocks defaultblock CURL_RPAREN_TOK

   52 caseblocks: CASE_TOK var COLON_TOK statements caseblocks
   53           | %empty

   54 defaultblock: DEFAULT_TOK COLON_TOK statements caseblocks
   55             | %empty

   56 loopstatement: WHILE_TOK condexp nonfunctionblock
   57              | FOR_TOK LPAREN_TOK forpart1 forpart2 forpart3 RPAREN_TOK nonfunctionblock

   58 forpart1: varinitlist
   59         | vardec
   60         | SEMICOLON_TOK

   61 varinitlist: ID_TOK EQ_TOK exp2 COMMA_TOK varinitlist
   62            | ID_TOK EQ_TOK exp2 SEMICOLON_TOK

   63 forpart2: exp4 forpart2ex SEMICOLON_TOK
   64         | SEMICOLON_TOK

   65 forpart2ex: COMMA_TOK exp4 forpart2ex
   66           | %empty

   67 forpart3: exp forpart3ex
   68         | %empty

   69 forpart3ex: COMMA_TOK exp forpart3ex
   70           | %empty

   71 condexp: LPAREN_TOK exp4 RPAREN_TOK

   72 exp4: LPAREN_TOK exp4 RPAREN_TOK
   73     | exp3 OR_TOK exp4
   74     | exp3 AND_TOK exp4
   75     | NOT_TOK exp4
   76     | exp3

   77 exp3: LPAREN_TOK exp3 RPAREN_TOK
   78     | exp2 LT_TOK exp2
   79     | exp2 GT_TOK exp2
   80     | exp2 GTEQ_TOK exp2
   81     | exp2 LTEQ_TOK exp2
   82     | exp2 COMPARE_TOK exp2
   83     | exp2 NOT_EQ_TOK exp2
   84     | exp2

   85 exp: ID_TOK EQ_TOK exp2
   86    | ID_TOK PLUS_EQ_TOK exp2
   87    | ID_TOK MINUS_EQ_TOK exp2
   88    | ID_TOK MULT_EQ_TOK exp2
   89    | ID_TOK DIVIDE_EQ_TOK exp2
   90    | ID_TOK MOD_EQ_TOK exp2
   91    | exp0

   92 exp2: LPAREN_TOK exp2 RPAREN_TOK
   93     | exp1 PLUS_TOK exp2
   94     | exp1 MINUS_TOK exp2
   95     | exp1

   96 exp1: var MULT_TOK exp1
   97     | var DIVIDE_TOK exp1
   98     | var MOD_TOK exp1
   99     | var
  100     | exp0
  101     | funccall

  102 exp0: ID_TOK PLUS_PLUS_TOK
  103     | ID_TOK MINUS_MINUS_TOK
  104     | PLUS_PLUS_TOK ID_TOK
  105     | MINUS_MINUS_TOK ID_TOK

  106 var: ID_TOK
  107    | INTCONST
  108    | DOUBLECONST
  109    | CHARCONST


Terminals, with rules where they appear

$end (0) 0
error (256)
LPAREN_TOK (258) 10 11 17 57 71 72 77 92
RPAREN_TOK (259) 10 11 17 57 71 72 77 92
CURL_LPAREN_TOK (260) 25 51
CURL_RPAREN_TOK (261) 25 51
DEFINE_TOK (262)
EQ_TOK (263) 6 8 61 62 85
GT_TOK (264) 79
LT_TOK (265) 78
MINUS_TOK (266) 94
PLUS_TOK (267) 93
MULT_TOK (268) 96
DIVIDE_TOK (269) 97
MOD_TOK (270) 98
XOR_TOK (271)
NOT_TOK (272) 75
AND_TOK (273) 74
OR_TOK (274) 73
COLON_TOK (275) 52 54
SEMICOLON_TOK (276) 5 6 12 17 28 34 40 60 62 63 64
COMMA_TOK (277) 7 8 15 16 18 61 65 69
SWITCH_TOK (278) 50
CASE_TOK (279) 52
DEFAULT_TOK (280) 54
WHILE_TOK (281) 56
FOR_TOK (282) 57
IF_TOK (283) 46 47
ELSE_TOK (284) 47
ELSEIF_TOK (285) 48
COMPARE_TOK (286) 82
GTEQ_TOK (287) 80
LTEQ_TOK (288) 81
NOT_EQ_TOK (289) 83
BIT_AND_TOK (290)
BIT_OR_TOK (291)
PLUS_EQ_TOK (292) 86
MINUS_EQ_TOK (293) 87
MULT_EQ_TOK (294) 88
DIVIDE_EQ_TOK (295) 89
RIGHT_SHIFT_TOK (296)
LEFT_SHIFT_TOK (297)
MINUS_MINUS_TOK (298) 103 105
PLUS_PLUS_TOK (299) 102 104
MOD_EQ_TOK (300) 90
ERROR_TOK (301)
RETURN_TOK (302) 12
INTCONST (303) 107
TYPE_TOK (304) 5 6 10 13 15 16
DOUBLECONST (305) 108
CHARCONST (306) 109
ID_TOK (307) 5 6 7 8 10 11 13 15 16 17 61 62 85 86 87 88 89 90 102
    103 104 105 106


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
DEBUG (54)
    on left: 1, on right: 0
START (55)
    on left: 2 3 4, on right: 1 2 3
vardec (56)
    on left: 5 6, on right: 2 26 59
vardecex (57)
    on left: 7 8 9, on right: 5 6 7 8
funcdef (58)
    on left: 10 11, on right: 3
returnstatement (59)
    on left: 12, on right: 31 37 43
arglist (60)
    on left: 13 14, on right: 10 11
arglistex (61)
    on left: 15 16, on right: 13 15
funccall (62)
    on left: 17, on right: 32 38 44 101
paramlist (63)
    on left: 18 19, on right: 17 18
nestedblock (64)
    on left: 20 21, on right: 25
estatements (65)
    on left: 22 23, on right: 20 21
block (66)
    on left: 25, on right: 10 11 20 33
$@1 (67)
    on left: 24, on right: 25
vardeclines (68)
    on left: 26 27, on right: 20 21 26 51
nonfunctionblock (69)
    on left: 28 29 30 31 32 33, on right: 46 47 48 56 57
statements (70)
    on left: 34 35 36 37 38 39 40 41 42 43 44 45, on right: 22 34 35
    36 37 38 39 52 54
ifstatement (71)
    on left: 46 47, on right: 29 35 41
ifstatementex (72)
    on left: 48 49, on right: 46 47 48
switchstatement (73)
    on left: 50, on right: 39 45
switchblock (74)
    on left: 51, on right: 50
caseblocks (75)
    on left: 52 53, on right: 51 52 54
defaultblock (76)
    on left: 54 55, on right: 51
loopstatement (77)
    on left: 56 57, on right: 30 36 42
forpart1 (78)
    on left: 58 59 60, on right: 57
varinitlist (79)
    on left: 61 62, on right: 58 61
forpart2 (80)
    on left: 63 64, on right: 57
forpart2ex (81)
    on left: 65 66, on right: 63 65
forpart3 (82)
    on left: 67 68, on right: 57
forpart3ex (83)
    on left: 69 70, on right: 67 69
condexp (84)
    on left: 71, on right: 46 47 48 50 56
exp4 (85)
    on left: 72 73 74 75 76, on right: 63 65 71 72 73 74 75
exp3 (86)
    on left: 77 78 79 80 81 82 83 84, on right: 73 74 76 77
exp (87)
    on left: 85 86 87 88 89 90 91, on right: 18 19 28 34 40 67 69
exp2 (88)
    on left: 92 93 94 95, on right: 6 8 12 61 62 78 79 80 81 82 83
    84 85 86 87 88 89 90 92 93 94
exp1 (89)
    on left: 96 97 98 99 100 101, on right: 93 94 95 96 97 98
exp0 (90)
    on left: 102 103 104 105, on right: 91 100
var (91)
    on left: 106 107 108 109, on right: 52 96 97 98 99


State 0

    0 $accept: . DEBUG $end

    TYPE_TOK  shift, and go to state 1
    ID_TOK    shift, and go to state 2

    $default  reduce using rule 4 (START)

    DEBUG    go to state 3
    START    go to state 4
    vardec   go to state 5
    funcdef  go to state 6


State 1

    5 vardec: TYPE_TOK . ID_TOK vardecex SEMICOLON_TOK
    6       | TYPE_TOK . ID_TOK EQ_TOK exp2 vardecex SEMICOLON_TOK
   10 funcdef: TYPE_TOK . ID_TOK LPAREN_TOK arglist RPAREN_TOK block

    ID_TOK  shift, and go to state 7


State 2

   11 funcdef: ID_TOK . LPAREN_TOK arglist RPAREN_TOK block

    LPAREN_TOK  shift, and go to state 8


State 3

    0 $accept: DEBUG . $end

    $end  shift, and go to state 9


State 4

    1 DEBUG: START .

    $default  reduce using rule 1 (DEBUG)


State 5

    2 START: vardec . START

    TYPE_TOK  shift, and go to state 1
    ID_TOK    shift, and go to state 2

    $default  reduce using rule 4 (START)

    START    go to state 10
    vardec   go to state 5
    funcdef  go to state 6


State 6

    3 START: funcdef . START

    TYPE_TOK  shift, and go to state 1
    ID_TOK    shift, and go to state 2

    $default  reduce using rule 4 (START)

    START    go to state 11
    vardec   go to state 5
    funcdef  go to state 6


State 7

    5 vardec: TYPE_TOK ID_TOK . vardecex SEMICOLON_TOK
    6       | TYPE_TOK ID_TOK . EQ_TOK exp2 vardecex SEMICOLON_TOK
   10 funcdef: TYPE_TOK ID_TOK . LPAREN_TOK arglist RPAREN_TOK block

    LPAREN_TOK  shift, and go to state 12
    EQ_TOK      shift, and go to state 13

    $default  reduce using rule 9 (vardecex)

    vardecex  go to state 14


State 8

   11 funcdef: ID_TOK LPAREN_TOK . arglist RPAREN_TOK block

    TYPE_TOK  shift, and go to state 15

    $default  reduce using rule 14 (arglist)

    arglist  go to state 16


State 9

    0 $accept: DEBUG $end .

    $default  accept


State 10

    2 START: vardec START .

    $default  reduce using rule 2 (START)


State 11

    3 START: funcdef START .

    $default  reduce using rule 3 (START)


State 12

   10 funcdef: TYPE_TOK ID_TOK LPAREN_TOK . arglist RPAREN_TOK block

    TYPE_TOK  shift, and go to state 15

    $default  reduce using rule 14 (arglist)

    arglist  go to state 17


State 13

    6 vardec: TYPE_TOK ID_TOK EQ_TOK . exp2 vardecex SEMICOLON_TOK

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 26
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 14

    5 vardec: TYPE_TOK ID_TOK vardecex . SEMICOLON_TOK
    7 vardecex: vardecex . COMMA_TOK ID_TOK
    8         | vardecex . COMMA_TOK ID_TOK EQ_TOK exp2

    SEMICOLON_TOK  shift, and go to state 30
    COMMA_TOK      shift, and go to state 31


State 15

   13 arglist: TYPE_TOK . ID_TOK arglistex

    ID_TOK  shift, and go to state 32


State 16

   11 funcdef: ID_TOK LPAREN_TOK arglist . RPAREN_TOK block

    RPAREN_TOK  shift, and go to state 33


State 17

   10 funcdef: TYPE_TOK ID_TOK LPAREN_TOK arglist . RPAREN_TOK block

    RPAREN_TOK  shift, and go to state 34


State 18

   92 exp2: LPAREN_TOK . exp2 RPAREN_TOK

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 35
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 19

  105 exp0: MINUS_MINUS_TOK . ID_TOK

    ID_TOK  shift, and go to state 36


State 20

  104 exp0: PLUS_PLUS_TOK . ID_TOK

    ID_TOK  shift, and go to state 37


State 21

  107 var: INTCONST .

    $default  reduce using rule 107 (var)


State 22

  108 var: DOUBLECONST .

    $default  reduce using rule 108 (var)


State 23

  109 var: CHARCONST .

    $default  reduce using rule 109 (var)


State 24

   17 funccall: ID_TOK . LPAREN_TOK paramlist RPAREN_TOK SEMICOLON_TOK
  102 exp0: ID_TOK . PLUS_PLUS_TOK
  103     | ID_TOK . MINUS_MINUS_TOK
  106 var: ID_TOK .

    LPAREN_TOK       shift, and go to state 38
    MINUS_MINUS_TOK  shift, and go to state 39
    PLUS_PLUS_TOK    shift, and go to state 40

    $default  reduce using rule 106 (var)


State 25

  101 exp1: funccall .

    $default  reduce using rule 101 (exp1)


State 26

    6 vardec: TYPE_TOK ID_TOK EQ_TOK exp2 . vardecex SEMICOLON_TOK

    $default  reduce using rule 9 (vardecex)

    vardecex  go to state 41


State 27

   93 exp2: exp1 . PLUS_TOK exp2
   94     | exp1 . MINUS_TOK exp2
   95     | exp1 .

    MINUS_TOK  shift, and go to state 42
    PLUS_TOK   shift, and go to state 43

    $default  reduce using rule 95 (exp2)


State 28

  100 exp1: exp0 .

    $default  reduce using rule 100 (exp1)


State 29

   96 exp1: var . MULT_TOK exp1
   97     | var . DIVIDE_TOK exp1
   98     | var . MOD_TOK exp1
   99     | var .

    MULT_TOK    shift, and go to state 44
    DIVIDE_TOK  shift, and go to state 45
    MOD_TOK     shift, and go to state 46

    $default  reduce using rule 99 (exp1)


State 30

    5 vardec: TYPE_TOK ID_TOK vardecex SEMICOLON_TOK .

    $default  reduce using rule 5 (vardec)


State 31

    7 vardecex: vardecex COMMA_TOK . ID_TOK
    8         | vardecex COMMA_TOK . ID_TOK EQ_TOK exp2

    ID_TOK  shift, and go to state 47


State 32

   13 arglist: TYPE_TOK ID_TOK . arglistex

    COMMA_TOK  shift, and go to state 48

    arglistex  go to state 49


State 33

   11 funcdef: ID_TOK LPAREN_TOK arglist RPAREN_TOK . block

    CURL_LPAREN_TOK  shift, and go to state 50

    block  go to state 51


State 34

   10 funcdef: TYPE_TOK ID_TOK LPAREN_TOK arglist RPAREN_TOK . block

    CURL_LPAREN_TOK  shift, and go to state 50

    block  go to state 52


State 35

   92 exp2: LPAREN_TOK exp2 . RPAREN_TOK

    RPAREN_TOK  shift, and go to state 53


State 36

  105 exp0: MINUS_MINUS_TOK ID_TOK .

    $default  reduce using rule 105 (exp0)


State 37

  104 exp0: PLUS_PLUS_TOK ID_TOK .

    $default  reduce using rule 104 (exp0)


State 38

   17 funccall: ID_TOK LPAREN_TOK . paramlist RPAREN_TOK SEMICOLON_TOK

    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    ID_TOK           shift, and go to state 54

    paramlist  go to state 55
    exp        go to state 56
    exp0       go to state 57


State 39

  103 exp0: ID_TOK MINUS_MINUS_TOK .

    $default  reduce using rule 103 (exp0)


State 40

  102 exp0: ID_TOK PLUS_PLUS_TOK .

    $default  reduce using rule 102 (exp0)


State 41

    6 vardec: TYPE_TOK ID_TOK EQ_TOK exp2 vardecex . SEMICOLON_TOK
    7 vardecex: vardecex . COMMA_TOK ID_TOK
    8         | vardecex . COMMA_TOK ID_TOK EQ_TOK exp2

    SEMICOLON_TOK  shift, and go to state 58
    COMMA_TOK      shift, and go to state 31


State 42

   94 exp2: exp1 MINUS_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 59
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 43

   93 exp2: exp1 PLUS_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 60
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 44

   96 exp1: var MULT_TOK . exp1

    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp1      go to state 61
    exp0      go to state 28
    var       go to state 29


State 45

   97 exp1: var DIVIDE_TOK . exp1

    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp1      go to state 62
    exp0      go to state 28
    var       go to state 29


State 46

   98 exp1: var MOD_TOK . exp1

    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp1      go to state 63
    exp0      go to state 28
    var       go to state 29


State 47

    7 vardecex: vardecex COMMA_TOK ID_TOK .
    8         | vardecex COMMA_TOK ID_TOK . EQ_TOK exp2

    EQ_TOK  shift, and go to state 64

    $default  reduce using rule 7 (vardecex)


State 48

   15 arglistex: COMMA_TOK . TYPE_TOK ID_TOK arglistex
   16          | COMMA_TOK . TYPE_TOK ID_TOK

    TYPE_TOK  shift, and go to state 65


State 49

   13 arglist: TYPE_TOK ID_TOK arglistex .

    $default  reduce using rule 13 (arglist)


State 50

   25 block: CURL_LPAREN_TOK . $@1 nestedblock CURL_RPAREN_TOK

    $default  reduce using rule 24 ($@1)

    $@1  go to state 66


State 51

   11 funcdef: ID_TOK LPAREN_TOK arglist RPAREN_TOK block .

    $default  reduce using rule 11 (funcdef)


State 52

   10 funcdef: TYPE_TOK ID_TOK LPAREN_TOK arglist RPAREN_TOK block .

    $default  reduce using rule 10 (funcdef)


State 53

   92 exp2: LPAREN_TOK exp2 RPAREN_TOK .

    $default  reduce using rule 92 (exp2)


State 54

   85 exp: ID_TOK . EQ_TOK exp2
   86    | ID_TOK . PLUS_EQ_TOK exp2
   87    | ID_TOK . MINUS_EQ_TOK exp2
   88    | ID_TOK . MULT_EQ_TOK exp2
   89    | ID_TOK . DIVIDE_EQ_TOK exp2
   90    | ID_TOK . MOD_EQ_TOK exp2
  102 exp0: ID_TOK . PLUS_PLUS_TOK
  103     | ID_TOK . MINUS_MINUS_TOK

    EQ_TOK           shift, and go to state 67
    PLUS_EQ_TOK      shift, and go to state 68
    MINUS_EQ_TOK     shift, and go to state 69
    MULT_EQ_TOK      shift, and go to state 70
    DIVIDE_EQ_TOK    shift, and go to state 71
    MINUS_MINUS_TOK  shift, and go to state 39
    PLUS_PLUS_TOK    shift, and go to state 40
    MOD_EQ_TOK       shift, and go to state 72


State 55

   17 funccall: ID_TOK LPAREN_TOK paramlist . RPAREN_TOK SEMICOLON_TOK

    RPAREN_TOK  shift, and go to state 73


State 56

   18 paramlist: exp . COMMA_TOK paramlist
   19          | exp .

    COMMA_TOK  shift, and go to state 74

    $default  reduce using rule 19 (paramlist)


State 57

   91 exp: exp0 .

    $default  reduce using rule 91 (exp)


State 58

    6 vardec: TYPE_TOK ID_TOK EQ_TOK exp2 vardecex SEMICOLON_TOK .

    $default  reduce using rule 6 (vardec)


State 59

   94 exp2: exp1 MINUS_TOK exp2 .

    $default  reduce using rule 94 (exp2)


State 60

   93 exp2: exp1 PLUS_TOK exp2 .

    $default  reduce using rule 93 (exp2)


State 61

   96 exp1: var MULT_TOK exp1 .

    $default  reduce using rule 96 (exp1)


State 62

   97 exp1: var DIVIDE_TOK exp1 .

    $default  reduce using rule 97 (exp1)


State 63

   98 exp1: var MOD_TOK exp1 .

    $default  reduce using rule 98 (exp1)


State 64

    8 vardecex: vardecex COMMA_TOK ID_TOK EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 75
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 65

   15 arglistex: COMMA_TOK TYPE_TOK . ID_TOK arglistex
   16          | COMMA_TOK TYPE_TOK . ID_TOK

    ID_TOK  shift, and go to state 76


State 66

   25 block: CURL_LPAREN_TOK $@1 . nestedblock CURL_RPAREN_TOK

    $default  reduce using rule 27 (vardeclines)

    nestedblock  go to state 77
    vardeclines  go to state 78


State 67

   85 exp: ID_TOK EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 79
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 68

   86 exp: ID_TOK PLUS_EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 80
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 69

   87 exp: ID_TOK MINUS_EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 81
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 70

   88 exp: ID_TOK MULT_EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 82
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 71

   89 exp: ID_TOK DIVIDE_EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 83
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 72

   90 exp: ID_TOK MOD_EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 84
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 73

   17 funccall: ID_TOK LPAREN_TOK paramlist RPAREN_TOK . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 85


State 74

   18 paramlist: exp COMMA_TOK . paramlist

    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    ID_TOK           shift, and go to state 54

    paramlist  go to state 86
    exp        go to state 56
    exp0       go to state 57


State 75

    8 vardecex: vardecex COMMA_TOK ID_TOK EQ_TOK exp2 .

    $default  reduce using rule 8 (vardecex)


State 76

   15 arglistex: COMMA_TOK TYPE_TOK ID_TOK . arglistex
   16          | COMMA_TOK TYPE_TOK ID_TOK .

    COMMA_TOK  shift, and go to state 48

    $default  reduce using rule 16 (arglistex)

    arglistex  go to state 87


State 77

   25 block: CURL_LPAREN_TOK $@1 nestedblock . CURL_RPAREN_TOK

    CURL_RPAREN_TOK  shift, and go to state 88


State 78

   20 nestedblock: vardeclines . estatements block estatements
   21            | vardeclines . estatements
   26 vardeclines: vardeclines . vardec

    SWITCH_TOK       shift, and go to state 89
    WHILE_TOK        shift, and go to state 90
    FOR_TOK          shift, and go to state 91
    IF_TOK           shift, and go to state 92
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 93
    TYPE_TOK         shift, and go to state 94
    ID_TOK           shift, and go to state 95

    $default  reduce using rule 23 (estatements)

    vardec           go to state 96
    returnstatement  go to state 97
    funccall         go to state 98
    estatements      go to state 99
    statements       go to state 100
    ifstatement      go to state 101
    switchstatement  go to state 102
    loopstatement    go to state 103
    exp              go to state 104
    exp0             go to state 57


State 79

   85 exp: ID_TOK EQ_TOK exp2 .

    $default  reduce using rule 85 (exp)


State 80

   86 exp: ID_TOK PLUS_EQ_TOK exp2 .

    $default  reduce using rule 86 (exp)


State 81

   87 exp: ID_TOK MINUS_EQ_TOK exp2 .

    $default  reduce using rule 87 (exp)


State 82

   88 exp: ID_TOK MULT_EQ_TOK exp2 .

    $default  reduce using rule 88 (exp)


State 83

   89 exp: ID_TOK DIVIDE_EQ_TOK exp2 .

    $default  reduce using rule 89 (exp)


State 84

   90 exp: ID_TOK MOD_EQ_TOK exp2 .

    $default  reduce using rule 90 (exp)


State 85

   17 funccall: ID_TOK LPAREN_TOK paramlist RPAREN_TOK SEMICOLON_TOK .

    $default  reduce using rule 17 (funccall)


State 86

   18 paramlist: exp COMMA_TOK paramlist .

    $default  reduce using rule 18 (paramlist)


State 87

   15 arglistex: COMMA_TOK TYPE_TOK ID_TOK arglistex .

    $default  reduce using rule 15 (arglistex)


State 88

   25 block: CURL_LPAREN_TOK $@1 nestedblock CURL_RPAREN_TOK .

    $default  reduce using rule 25 (block)


State 89

   50 switchstatement: SWITCH_TOK . condexp switchblock

    LPAREN_TOK  shift, and go to state 105

    condexp  go to state 106


State 90

   56 loopstatement: WHILE_TOK . condexp nonfunctionblock

    LPAREN_TOK  shift, and go to state 105

    condexp  go to state 107


State 91

   57 loopstatement: FOR_TOK . LPAREN_TOK forpart1 forpart2 forpart3 RPAREN_TOK nonfunctionblock

    LPAREN_TOK  shift, and go to state 108


State 92

   46 ifstatement: IF_TOK . condexp nonfunctionblock ifstatementex
   47            | IF_TOK . condexp nonfunctionblock ifstatementex ELSE_TOK nonfunctionblock

    LPAREN_TOK  shift, and go to state 105

    condexp  go to state 109


State 93

   12 returnstatement: RETURN_TOK . exp2 SEMICOLON_TOK

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 110
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 94

    5 vardec: TYPE_TOK . ID_TOK vardecex SEMICOLON_TOK
    6       | TYPE_TOK . ID_TOK EQ_TOK exp2 vardecex SEMICOLON_TOK

    ID_TOK  shift, and go to state 111


State 95

   17 funccall: ID_TOK . LPAREN_TOK paramlist RPAREN_TOK SEMICOLON_TOK
   85 exp: ID_TOK . EQ_TOK exp2
   86    | ID_TOK . PLUS_EQ_TOK exp2
   87    | ID_TOK . MINUS_EQ_TOK exp2
   88    | ID_TOK . MULT_EQ_TOK exp2
   89    | ID_TOK . DIVIDE_EQ_TOK exp2
   90    | ID_TOK . MOD_EQ_TOK exp2
  102 exp0: ID_TOK . PLUS_PLUS_TOK
  103     | ID_TOK . MINUS_MINUS_TOK

    LPAREN_TOK       shift, and go to state 38
    EQ_TOK           shift, and go to state 67
    PLUS_EQ_TOK      shift, and go to state 68
    MINUS_EQ_TOK     shift, and go to state 69
    MULT_EQ_TOK      shift, and go to state 70
    DIVIDE_EQ_TOK    shift, and go to state 71
    MINUS_MINUS_TOK  shift, and go to state 39
    PLUS_PLUS_TOK    shift, and go to state 40
    MOD_EQ_TOK       shift, and go to state 72


State 96

   26 vardeclines: vardeclines vardec .

    $default  reduce using rule 26 (vardeclines)


State 97

   37 statements: returnstatement . statements
   43           | returnstatement .

    SWITCH_TOK       shift, and go to state 89
    WHILE_TOK        shift, and go to state 90
    FOR_TOK          shift, and go to state 91
    IF_TOK           shift, and go to state 92
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 93
    ID_TOK           shift, and go to state 95

    $default  reduce using rule 43 (statements)

    returnstatement  go to state 97
    funccall         go to state 98
    statements       go to state 112
    ifstatement      go to state 101
    switchstatement  go to state 102
    loopstatement    go to state 103
    exp              go to state 104
    exp0             go to state 57


State 98

   38 statements: funccall . statements
   44           | funccall .

    SWITCH_TOK       shift, and go to state 89
    WHILE_TOK        shift, and go to state 90
    FOR_TOK          shift, and go to state 91
    IF_TOK           shift, and go to state 92
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 93
    ID_TOK           shift, and go to state 95

    $default  reduce using rule 44 (statements)

    returnstatement  go to state 97
    funccall         go to state 98
    statements       go to state 113
    ifstatement      go to state 101
    switchstatement  go to state 102
    loopstatement    go to state 103
    exp              go to state 104
    exp0             go to state 57


State 99

   20 nestedblock: vardeclines estatements . block estatements
   21            | vardeclines estatements .

    CURL_LPAREN_TOK  shift, and go to state 50

    $default  reduce using rule 21 (nestedblock)

    block  go to state 114


State 100

   22 estatements: statements .

    $default  reduce using rule 22 (estatements)


State 101

   35 statements: ifstatement . statements
   41           | ifstatement .

    SWITCH_TOK       shift, and go to state 89
    WHILE_TOK        shift, and go to state 90
    FOR_TOK          shift, and go to state 91
    IF_TOK           shift, and go to state 92
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 93
    ID_TOK           shift, and go to state 95

    $default  reduce using rule 41 (statements)

    returnstatement  go to state 97
    funccall         go to state 98
    statements       go to state 115
    ifstatement      go to state 101
    switchstatement  go to state 102
    loopstatement    go to state 103
    exp              go to state 104
    exp0             go to state 57


State 102

   39 statements: switchstatement . statements
   45           | switchstatement .

    SWITCH_TOK       shift, and go to state 89
    WHILE_TOK        shift, and go to state 90
    FOR_TOK          shift, and go to state 91
    IF_TOK           shift, and go to state 92
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 93
    ID_TOK           shift, and go to state 95

    $default  reduce using rule 45 (statements)

    returnstatement  go to state 97
    funccall         go to state 98
    statements       go to state 116
    ifstatement      go to state 101
    switchstatement  go to state 102
    loopstatement    go to state 103
    exp              go to state 104
    exp0             go to state 57


State 103

   36 statements: loopstatement . statements
   42           | loopstatement .

    SWITCH_TOK       shift, and go to state 89
    WHILE_TOK        shift, and go to state 90
    FOR_TOK          shift, and go to state 91
    IF_TOK           shift, and go to state 92
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 93
    ID_TOK           shift, and go to state 95

    $default  reduce using rule 42 (statements)

    returnstatement  go to state 97
    funccall         go to state 98
    statements       go to state 117
    ifstatement      go to state 101
    switchstatement  go to state 102
    loopstatement    go to state 103
    exp              go to state 104
    exp0             go to state 57


State 104

   34 statements: exp . SEMICOLON_TOK statements
   40           | exp . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 118


State 105

   71 condexp: LPAREN_TOK . exp4 RPAREN_TOK

    LPAREN_TOK       shift, and go to state 119
    NOT_TOK          shift, and go to state 120
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp4      go to state 121
    exp3      go to state 122
    exp2      go to state 123
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 106

   50 switchstatement: SWITCH_TOK condexp . switchblock

    CURL_LPAREN_TOK  shift, and go to state 124

    switchblock  go to state 125


State 107

   56 loopstatement: WHILE_TOK condexp . nonfunctionblock

    CURL_LPAREN_TOK  shift, and go to state 50
    WHILE_TOK        shift, and go to state 90
    FOR_TOK          shift, and go to state 91
    IF_TOK           shift, and go to state 92
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 93
    ID_TOK           shift, and go to state 95

    returnstatement   go to state 126
    funccall          go to state 127
    block             go to state 128
    nonfunctionblock  go to state 129
    ifstatement       go to state 130
    loopstatement     go to state 131
    exp               go to state 132
    exp0              go to state 57


State 108

   57 loopstatement: FOR_TOK LPAREN_TOK . forpart1 forpart2 forpart3 RPAREN_TOK nonfunctionblock

    SEMICOLON_TOK  shift, and go to state 133
    TYPE_TOK       shift, and go to state 94
    ID_TOK         shift, and go to state 134

    vardec       go to state 135
    forpart1     go to state 136
    varinitlist  go to state 137


State 109

   46 ifstatement: IF_TOK condexp . nonfunctionblock ifstatementex
   47            | IF_TOK condexp . nonfunctionblock ifstatementex ELSE_TOK nonfunctionblock

    CURL_LPAREN_TOK  shift, and go to state 50
    WHILE_TOK        shift, and go to state 90
    FOR_TOK          shift, and go to state 91
    IF_TOK           shift, and go to state 92
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 93
    ID_TOK           shift, and go to state 95

    returnstatement   go to state 126
    funccall          go to state 127
    block             go to state 128
    nonfunctionblock  go to state 138
    ifstatement       go to state 130
    loopstatement     go to state 131
    exp               go to state 132
    exp0              go to state 57


State 110

   12 returnstatement: RETURN_TOK exp2 . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 139


State 111

    5 vardec: TYPE_TOK ID_TOK . vardecex SEMICOLON_TOK
    6       | TYPE_TOK ID_TOK . EQ_TOK exp2 vardecex SEMICOLON_TOK

    EQ_TOK  shift, and go to state 13

    $default  reduce using rule 9 (vardecex)

    vardecex  go to state 14


State 112

   37 statements: returnstatement statements .

    $default  reduce using rule 37 (statements)


State 113

   38 statements: funccall statements .

    $default  reduce using rule 38 (statements)


State 114

   20 nestedblock: vardeclines estatements block . estatements

    SWITCH_TOK       shift, and go to state 89
    WHILE_TOK        shift, and go to state 90
    FOR_TOK          shift, and go to state 91
    IF_TOK           shift, and go to state 92
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 93
    ID_TOK           shift, and go to state 95

    $default  reduce using rule 23 (estatements)

    returnstatement  go to state 97
    funccall         go to state 98
    estatements      go to state 140
    statements       go to state 100
    ifstatement      go to state 101
    switchstatement  go to state 102
    loopstatement    go to state 103
    exp              go to state 104
    exp0             go to state 57


State 115

   35 statements: ifstatement statements .

    $default  reduce using rule 35 (statements)


State 116

   39 statements: switchstatement statements .

    $default  reduce using rule 39 (statements)


State 117

   36 statements: loopstatement statements .

    $default  reduce using rule 36 (statements)


State 118

   34 statements: exp SEMICOLON_TOK . statements
   40           | exp SEMICOLON_TOK .

    SWITCH_TOK       shift, and go to state 89
    WHILE_TOK        shift, and go to state 90
    FOR_TOK          shift, and go to state 91
    IF_TOK           shift, and go to state 92
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 93
    ID_TOK           shift, and go to state 95

    $default  reduce using rule 40 (statements)

    returnstatement  go to state 97
    funccall         go to state 98
    statements       go to state 141
    ifstatement      go to state 101
    switchstatement  go to state 102
    loopstatement    go to state 103
    exp              go to state 104
    exp0             go to state 57


State 119

   72 exp4: LPAREN_TOK . exp4 RPAREN_TOK
   77 exp3: LPAREN_TOK . exp3 RPAREN_TOK
   92 exp2: LPAREN_TOK . exp2 RPAREN_TOK

    LPAREN_TOK       shift, and go to state 119
    NOT_TOK          shift, and go to state 120
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp4      go to state 142
    exp3      go to state 143
    exp2      go to state 144
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 120

   75 exp4: NOT_TOK . exp4

    LPAREN_TOK       shift, and go to state 119
    NOT_TOK          shift, and go to state 120
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp4      go to state 145
    exp3      go to state 122
    exp2      go to state 123
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 121

   71 condexp: LPAREN_TOK exp4 . RPAREN_TOK

    RPAREN_TOK  shift, and go to state 146


State 122

   73 exp4: exp3 . OR_TOK exp4
   74     | exp3 . AND_TOK exp4
   76     | exp3 .

    AND_TOK  shift, and go to state 147
    OR_TOK   shift, and go to state 148

    $default  reduce using rule 76 (exp4)


State 123

   78 exp3: exp2 . LT_TOK exp2
   79     | exp2 . GT_TOK exp2
   80     | exp2 . GTEQ_TOK exp2
   81     | exp2 . LTEQ_TOK exp2
   82     | exp2 . COMPARE_TOK exp2
   83     | exp2 . NOT_EQ_TOK exp2
   84     | exp2 .

    GT_TOK       shift, and go to state 149
    LT_TOK       shift, and go to state 150
    COMPARE_TOK  shift, and go to state 151
    GTEQ_TOK     shift, and go to state 152
    LTEQ_TOK     shift, and go to state 153
    NOT_EQ_TOK   shift, and go to state 154

    $default  reduce using rule 84 (exp3)


State 124

   51 switchblock: CURL_LPAREN_TOK . vardeclines caseblocks defaultblock CURL_RPAREN_TOK

    $default  reduce using rule 27 (vardeclines)

    vardeclines  go to state 155


State 125

   50 switchstatement: SWITCH_TOK condexp switchblock .

    $default  reduce using rule 50 (switchstatement)


State 126

   31 nonfunctionblock: returnstatement .

    $default  reduce using rule 31 (nonfunctionblock)


State 127

   32 nonfunctionblock: funccall .

    $default  reduce using rule 32 (nonfunctionblock)


State 128

   33 nonfunctionblock: block .

    $default  reduce using rule 33 (nonfunctionblock)


State 129

   56 loopstatement: WHILE_TOK condexp nonfunctionblock .

    $default  reduce using rule 56 (loopstatement)


State 130

   29 nonfunctionblock: ifstatement .

    $default  reduce using rule 29 (nonfunctionblock)


State 131

   30 nonfunctionblock: loopstatement .

    $default  reduce using rule 30 (nonfunctionblock)


State 132

   28 nonfunctionblock: exp . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 156


State 133

   60 forpart1: SEMICOLON_TOK .

    $default  reduce using rule 60 (forpart1)


State 134

   61 varinitlist: ID_TOK . EQ_TOK exp2 COMMA_TOK varinitlist
   62            | ID_TOK . EQ_TOK exp2 SEMICOLON_TOK

    EQ_TOK  shift, and go to state 157


State 135

   59 forpart1: vardec .

    $default  reduce using rule 59 (forpart1)


State 136

   57 loopstatement: FOR_TOK LPAREN_TOK forpart1 . forpart2 forpart3 RPAREN_TOK nonfunctionblock

    LPAREN_TOK       shift, and go to state 119
    NOT_TOK          shift, and go to state 120
    SEMICOLON_TOK    shift, and go to state 158
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    forpart2  go to state 159
    exp4      go to state 160
    exp3      go to state 122
    exp2      go to state 123
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 137

   58 forpart1: varinitlist .

    $default  reduce using rule 58 (forpart1)


State 138

   46 ifstatement: IF_TOK condexp nonfunctionblock . ifstatementex
   47            | IF_TOK condexp nonfunctionblock . ifstatementex ELSE_TOK nonfunctionblock

    ELSEIF_TOK  shift, and go to state 161

    ELSEIF_TOK  [reduce using rule 49 (ifstatementex)]
    $default    reduce using rule 49 (ifstatementex)

    ifstatementex  go to state 162


State 139

   12 returnstatement: RETURN_TOK exp2 SEMICOLON_TOK .

    $default  reduce using rule 12 (returnstatement)


State 140

   20 nestedblock: vardeclines estatements block estatements .

    $default  reduce using rule 20 (nestedblock)


State 141

   34 statements: exp SEMICOLON_TOK statements .

    $default  reduce using rule 34 (statements)


State 142

   72 exp4: LPAREN_TOK exp4 . RPAREN_TOK

    RPAREN_TOK  shift, and go to state 163


State 143

   73 exp4: exp3 . OR_TOK exp4
   74     | exp3 . AND_TOK exp4
   76     | exp3 .
   77 exp3: LPAREN_TOK exp3 . RPAREN_TOK

    RPAREN_TOK  shift, and go to state 164
    AND_TOK     shift, and go to state 147
    OR_TOK      shift, and go to state 148

    RPAREN_TOK  [reduce using rule 76 (exp4)]


State 144

   78 exp3: exp2 . LT_TOK exp2
   79     | exp2 . GT_TOK exp2
   80     | exp2 . GTEQ_TOK exp2
   81     | exp2 . LTEQ_TOK exp2
   82     | exp2 . COMPARE_TOK exp2
   83     | exp2 . NOT_EQ_TOK exp2
   84     | exp2 .
   92 exp2: LPAREN_TOK exp2 . RPAREN_TOK

    RPAREN_TOK   shift, and go to state 53
    GT_TOK       shift, and go to state 149
    LT_TOK       shift, and go to state 150
    COMPARE_TOK  shift, and go to state 151
    GTEQ_TOK     shift, and go to state 152
    LTEQ_TOK     shift, and go to state 153
    NOT_EQ_TOK   shift, and go to state 154

    RPAREN_TOK  [reduce using rule 84 (exp3)]
    $default    reduce using rule 84 (exp3)


State 145

   75 exp4: NOT_TOK exp4 .

    $default  reduce using rule 75 (exp4)


State 146

   71 condexp: LPAREN_TOK exp4 RPAREN_TOK .

    $default  reduce using rule 71 (condexp)


State 147

   74 exp4: exp3 AND_TOK . exp4

    LPAREN_TOK       shift, and go to state 119
    NOT_TOK          shift, and go to state 120
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp4      go to state 165
    exp3      go to state 122
    exp2      go to state 123
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 148

   73 exp4: exp3 OR_TOK . exp4

    LPAREN_TOK       shift, and go to state 119
    NOT_TOK          shift, and go to state 120
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp4      go to state 166
    exp3      go to state 122
    exp2      go to state 123
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 149

   79 exp3: exp2 GT_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 167
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 150

   78 exp3: exp2 LT_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 168
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 151

   82 exp3: exp2 COMPARE_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 169
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 152

   80 exp3: exp2 GTEQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 170
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 153

   81 exp3: exp2 LTEQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 171
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 154

   83 exp3: exp2 NOT_EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 172
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 155

   26 vardeclines: vardeclines . vardec
   51 switchblock: CURL_LPAREN_TOK vardeclines . caseblocks defaultblock CURL_RPAREN_TOK

    CASE_TOK  shift, and go to state 173
    TYPE_TOK  shift, and go to state 94

    $default  reduce using rule 53 (caseblocks)

    vardec      go to state 96
    caseblocks  go to state 174


State 156

   28 nonfunctionblock: exp SEMICOLON_TOK .

    $default  reduce using rule 28 (nonfunctionblock)


State 157

   61 varinitlist: ID_TOK EQ_TOK . exp2 COMMA_TOK varinitlist
   62            | ID_TOK EQ_TOK . exp2 SEMICOLON_TOK

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 175
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 158

   64 forpart2: SEMICOLON_TOK .

    $default  reduce using rule 64 (forpart2)


State 159

   57 loopstatement: FOR_TOK LPAREN_TOK forpart1 forpart2 . forpart3 RPAREN_TOK nonfunctionblock

    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    ID_TOK           shift, and go to state 54

    $default  reduce using rule 68 (forpart3)

    forpart3  go to state 176
    exp       go to state 177
    exp0      go to state 57


State 160

   63 forpart2: exp4 . forpart2ex SEMICOLON_TOK

    COMMA_TOK  shift, and go to state 178

    $default  reduce using rule 66 (forpart2ex)

    forpart2ex  go to state 179


State 161

   48 ifstatementex: ELSEIF_TOK . condexp nonfunctionblock ifstatementex

    LPAREN_TOK  shift, and go to state 105

    condexp  go to state 180


State 162

   46 ifstatement: IF_TOK condexp nonfunctionblock ifstatementex .
   47            | IF_TOK condexp nonfunctionblock ifstatementex . ELSE_TOK nonfunctionblock

    ELSE_TOK  shift, and go to state 181

    ELSE_TOK  [reduce using rule 46 (ifstatement)]
    $default  reduce using rule 46 (ifstatement)


State 163

   72 exp4: LPAREN_TOK exp4 RPAREN_TOK .

    $default  reduce using rule 72 (exp4)


State 164

   77 exp3: LPAREN_TOK exp3 RPAREN_TOK .

    $default  reduce using rule 77 (exp3)


State 165

   74 exp4: exp3 AND_TOK exp4 .

    $default  reduce using rule 74 (exp4)


State 166

   73 exp4: exp3 OR_TOK exp4 .

    $default  reduce using rule 73 (exp4)


State 167

   79 exp3: exp2 GT_TOK exp2 .

    $default  reduce using rule 79 (exp3)


State 168

   78 exp3: exp2 LT_TOK exp2 .

    $default  reduce using rule 78 (exp3)


State 169

   82 exp3: exp2 COMPARE_TOK exp2 .

    $default  reduce using rule 82 (exp3)


State 170

   80 exp3: exp2 GTEQ_TOK exp2 .

    $default  reduce using rule 80 (exp3)


State 171

   81 exp3: exp2 LTEQ_TOK exp2 .

    $default  reduce using rule 81 (exp3)


State 172

   83 exp3: exp2 NOT_EQ_TOK exp2 .

    $default  reduce using rule 83 (exp3)


State 173

   52 caseblocks: CASE_TOK . var COLON_TOK statements caseblocks

    INTCONST     shift, and go to state 21
    DOUBLECONST  shift, and go to state 22
    CHARCONST    shift, and go to state 23
    ID_TOK       shift, and go to state 182

    var  go to state 183


State 174

   51 switchblock: CURL_LPAREN_TOK vardeclines caseblocks . defaultblock CURL_RPAREN_TOK

    DEFAULT_TOK  shift, and go to state 184

    $default  reduce using rule 55 (defaultblock)

    defaultblock  go to state 185


State 175

   61 varinitlist: ID_TOK EQ_TOK exp2 . COMMA_TOK varinitlist
   62            | ID_TOK EQ_TOK exp2 . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 186
    COMMA_TOK      shift, and go to state 187


State 176

   57 loopstatement: FOR_TOK LPAREN_TOK forpart1 forpart2 forpart3 . RPAREN_TOK nonfunctionblock

    RPAREN_TOK  shift, and go to state 188


State 177

   67 forpart3: exp . forpart3ex

    COMMA_TOK  shift, and go to state 189

    $default  reduce using rule 70 (forpart3ex)

    forpart3ex  go to state 190


State 178

   65 forpart2ex: COMMA_TOK . exp4 forpart2ex

    LPAREN_TOK       shift, and go to state 119
    NOT_TOK          shift, and go to state 120
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp4      go to state 191
    exp3      go to state 122
    exp2      go to state 123
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 179

   63 forpart2: exp4 forpart2ex . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 192


State 180

   48 ifstatementex: ELSEIF_TOK condexp . nonfunctionblock ifstatementex

    CURL_LPAREN_TOK  shift, and go to state 50
    WHILE_TOK        shift, and go to state 90
    FOR_TOK          shift, and go to state 91
    IF_TOK           shift, and go to state 92
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 93
    ID_TOK           shift, and go to state 95

    returnstatement   go to state 126
    funccall          go to state 127
    block             go to state 128
    nonfunctionblock  go to state 193
    ifstatement       go to state 130
    loopstatement     go to state 131
    exp               go to state 132
    exp0              go to state 57


State 181

   47 ifstatement: IF_TOK condexp nonfunctionblock ifstatementex ELSE_TOK . nonfunctionblock

    CURL_LPAREN_TOK  shift, and go to state 50
    WHILE_TOK        shift, and go to state 90
    FOR_TOK          shift, and go to state 91
    IF_TOK           shift, and go to state 92
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 93
    ID_TOK           shift, and go to state 95

    returnstatement   go to state 126
    funccall          go to state 127
    block             go to state 128
    nonfunctionblock  go to state 194
    ifstatement       go to state 130
    loopstatement     go to state 131
    exp               go to state 132
    exp0              go to state 57


State 182

  106 var: ID_TOK .

    $default  reduce using rule 106 (var)


State 183

   52 caseblocks: CASE_TOK var . COLON_TOK statements caseblocks

    COLON_TOK  shift, and go to state 195


State 184

   54 defaultblock: DEFAULT_TOK . COLON_TOK statements caseblocks

    COLON_TOK  shift, and go to state 196


State 185

   51 switchblock: CURL_LPAREN_TOK vardeclines caseblocks defaultblock . CURL_RPAREN_TOK

    CURL_RPAREN_TOK  shift, and go to state 197


State 186

   62 varinitlist: ID_TOK EQ_TOK exp2 SEMICOLON_TOK .

    $default  reduce using rule 62 (varinitlist)


State 187

   61 varinitlist: ID_TOK EQ_TOK exp2 COMMA_TOK . varinitlist

    ID_TOK  shift, and go to state 134

    varinitlist  go to state 198


State 188

   57 loopstatement: FOR_TOK LPAREN_TOK forpart1 forpart2 forpart3 RPAREN_TOK . nonfunctionblock

    CURL_LPAREN_TOK  shift, and go to state 50
    WHILE_TOK        shift, and go to state 90
    FOR_TOK          shift, and go to state 91
    IF_TOK           shift, and go to state 92
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 93
    ID_TOK           shift, and go to state 95

    returnstatement   go to state 126
    funccall          go to state 127
    block             go to state 128
    nonfunctionblock  go to state 199
    ifstatement       go to state 130
    loopstatement     go to state 131
    exp               go to state 132
    exp0              go to state 57


State 189

   69 forpart3ex: COMMA_TOK . exp forpart3ex

    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    ID_TOK           shift, and go to state 54

    exp   go to state 200
    exp0  go to state 57


State 190

   67 forpart3: exp forpart3ex .

    $default  reduce using rule 67 (forpart3)


State 191

   65 forpart2ex: COMMA_TOK exp4 . forpart2ex

    COMMA_TOK  shift, and go to state 178

    $default  reduce using rule 66 (forpart2ex)

    forpart2ex  go to state 201


State 192

   63 forpart2: exp4 forpart2ex SEMICOLON_TOK .

    $default  reduce using rule 63 (forpart2)


State 193

   48 ifstatementex: ELSEIF_TOK condexp nonfunctionblock . ifstatementex

    ELSEIF_TOK  shift, and go to state 161

    ELSEIF_TOK  [reduce using rule 49 (ifstatementex)]
    $default    reduce using rule 49 (ifstatementex)

    ifstatementex  go to state 202


State 194

   47 ifstatement: IF_TOK condexp nonfunctionblock ifstatementex ELSE_TOK nonfunctionblock .

    $default  reduce using rule 47 (ifstatement)


State 195

   52 caseblocks: CASE_TOK var COLON_TOK . statements caseblocks

    SWITCH_TOK       shift, and go to state 89
    WHILE_TOK        shift, and go to state 90
    FOR_TOK          shift, and go to state 91
    IF_TOK           shift, and go to state 92
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 93
    ID_TOK           shift, and go to state 95

    returnstatement  go to state 97
    funccall         go to state 98
    statements       go to state 203
    ifstatement      go to state 101
    switchstatement  go to state 102
    loopstatement    go to state 103
    exp              go to state 104
    exp0             go to state 57


State 196

   54 defaultblock: DEFAULT_TOK COLON_TOK . statements caseblocks

    SWITCH_TOK       shift, and go to state 89
    WHILE_TOK        shift, and go to state 90
    FOR_TOK          shift, and go to state 91
    IF_TOK           shift, and go to state 92
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 93
    ID_TOK           shift, and go to state 95

    returnstatement  go to state 97
    funccall         go to state 98
    statements       go to state 204
    ifstatement      go to state 101
    switchstatement  go to state 102
    loopstatement    go to state 103
    exp              go to state 104
    exp0             go to state 57


State 197

   51 switchblock: CURL_LPAREN_TOK vardeclines caseblocks defaultblock CURL_RPAREN_TOK .

    $default  reduce using rule 51 (switchblock)


State 198

   61 varinitlist: ID_TOK EQ_TOK exp2 COMMA_TOK varinitlist .

    $default  reduce using rule 61 (varinitlist)


State 199

   57 loopstatement: FOR_TOK LPAREN_TOK forpart1 forpart2 forpart3 RPAREN_TOK nonfunctionblock .

    $default  reduce using rule 57 (loopstatement)


State 200

   69 forpart3ex: COMMA_TOK exp . forpart3ex

    COMMA_TOK  shift, and go to state 189

    $default  reduce using rule 70 (forpart3ex)

    forpart3ex  go to state 205


State 201

   65 forpart2ex: COMMA_TOK exp4 forpart2ex .

    $default  reduce using rule 65 (forpart2ex)


State 202

   48 ifstatementex: ELSEIF_TOK condexp nonfunctionblock ifstatementex .

    $default  reduce using rule 48 (ifstatementex)


State 203

   52 caseblocks: CASE_TOK var COLON_TOK statements . caseblocks

    CASE_TOK  shift, and go to state 173

    $default  reduce using rule 53 (caseblocks)

    caseblocks  go to state 206


State 204

   54 defaultblock: DEFAULT_TOK COLON_TOK statements . caseblocks

    CASE_TOK  shift, and go to state 173

    $default  reduce using rule 53 (caseblocks)

    caseblocks  go to state 207


State 205

   69 forpart3ex: COMMA_TOK exp forpart3ex .

    $default  reduce using rule 69 (forpart3ex)


State 206

   52 caseblocks: CASE_TOK var COLON_TOK statements caseblocks .

    $default  reduce using rule 52 (caseblocks)


State 207

   54 defaultblock: DEFAULT_TOK COLON_TOK statements caseblocks .

    $default  reduce using rule 54 (defaultblock)
