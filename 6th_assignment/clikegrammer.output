Terminals unused in grammar

   DEFINE_TOK
   XOR_TOK
   BIT_AND_TOK
   BIT_OR_TOK
   RIGHT_SHIFT_TOK
   LEFT_SHIFT_TOK
   ERROR_TOK
   MAIN_TOK


State 94 conflicts: 1 reduce/reduce
State 95 conflicts: 1 reduce/reduce
State 97 conflicts: 1 reduce/reduce
State 98 conflicts: 1 reduce/reduce
State 111 conflicts: 1 reduce/reduce
State 129 conflicts: 1 shift/reduce
State 133 conflicts: 1 shift/reduce
State 134 conflicts: 1 shift/reduce


Grammar

    0 $accept: DEBUG $end

    1 DEBUG: START

    2 START: vardec START
    3      | funcdef START
    4      | %empty

    5 vardec: TYPE_TOK ID_TOK vardecex SEMICOLON_TOK
    6       | TYPE_TOK ID_TOK EQ_TOK exp2 vardecex SEMICOLON_TOK

    7 vardecex: vardecex COMMA_TOK ID_TOK
    8         | vardecex COMMA_TOK ID_TOK EQ_TOK exp2
    9         | %empty

   10 funcdef: TYPE_TOK ID_TOK LPAREN_TOK arglist RPAREN_TOK block
   11        | ID_TOK LPAREN_TOK arglist RPAREN_TOK block

   12 returnstatement: RETURN_TOK exp2 SEMICOLON_TOK

   13 arglist: TYPE_TOK ID_TOK arglistex
   14        | %empty

   15 arglistex: COMMA_TOK TYPE_TOK ID_TOK arglistex
   16          | COMMA_TOK TYPE_TOK ID_TOK

   17 funccall: ID_TOK LPAREN_TOK paramlist RPAREN_TOK SEMICOLON_TOK

   18 paramlist: exp COMMA_TOK paramlist
   19          | exp

   20 $@1: %empty

   21 block: CURL_LPAREN_TOK $@1 vardeclines statements CURL_RPAREN_TOK

   22 vardeclines: vardeclines vardec
   23            | %empty

   24 nonfunctionblock: exp SEMICOLON_TOK
   25                 | ifstatement
   26                 | loopstatement
   27                 | returnstatement
   28                 | funccall
   29                 | block

   30 statements: exp SEMICOLON_TOK statements
   31           | ifstatement statements
   32           | loopstatement statements
   33           | returnstatement statements
   34           | funccall statements
   35           | exp SEMICOLON_TOK
   36           | ifstatement
   37           | loopstatement
   38           | returnstatement
   39           | funccall
   40           | %empty

   41 ifstatement: IF_TOK condexp nonfunctionblock
   42            | IF_TOK condexp nonfunctionblock ELSE_TOK nonfunctionblock

   43 loopstatement: WHILE_TOK condexp nonfunctionblock
   44              | FOR_TOK LPAREN_TOK forpart1 forpart2 forpart3 RPAREN_TOK nonfunctionblock

   45 forpart1: varinitlist
   46         | vardec
   47         | SEMICOLON_TOK

   48 varinitlist: ID_TOK EQ_TOK exp2 COMMA_TOK varinitlist
   49            | ID_TOK EQ_TOK exp2 SEMICOLON_TOK

   50 forpart2: exp4 forpart2ex SEMICOLON_TOK
   51         | SEMICOLON_TOK

   52 forpart2ex: COMMA_TOK exp4 forpart2ex
   53           | %empty

   54 forpart3: exp forpart3ex
   55         | %empty

   56 forpart3ex: COMMA_TOK exp forpart3ex
   57           | %empty

   58 condexp: LPAREN_TOK exp4 RPAREN_TOK

   59 exp4: LPAREN_TOK exp4 RPAREN_TOK
   60     | exp3 OR_TOK exp4
   61     | exp3 AND_TOK exp4
   62     | NOT_TOK exp4
   63     | exp3

   64 exp3: LPAREN_TOK exp3 RPAREN_TOK
   65     | exp2 LT_TOK exp2
   66     | exp2 GT_TOK exp2
   67     | exp2 GTEQ_TOK exp2
   68     | exp2 LTEQ_TOK exp2
   69     | exp2 COMPARE_TOK exp2
   70     | exp2 NOT_EQ_TOK exp2
   71     | exp2

   72 exp: ID_TOK EQ_TOK exp2
   73    | ID_TOK PLUS_EQ_TOK exp2
   74    | ID_TOK MINUS_EQ_TOK exp2
   75    | ID_TOK MULT_EQ_TOK exp2
   76    | ID_TOK DIVIDE_EQ_TOK exp2
   77    | ID_TOK MOD_EQ_TOK exp2
   78    | exp0

   79 exp2: LPAREN_TOK exp2 RPAREN_TOK
   80     | exp1 PLUS_TOK exp2
   81     | exp1 MINUS_TOK exp2
   82     | exp1

   83 exp1: var MULT_TOK exp1
   84     | var DIVIDE_TOK exp1
   85     | var MOD_TOK exp1
   86     | var
   87     | exp0
   88     | funccall

   89 exp0: ID_TOK PLUS_PLUS_TOK
   90     | ID_TOK MINUS_MINUS_TOK
   91     | PLUS_PLUS_TOK ID_TOK
   92     | MINUS_MINUS_TOK ID_TOK

   93 var: ID_TOK
   94    | INTCONST
   95    | DOUBLECONST
   96    | CHARCONST


Terminals, with rules where they appear

$end (0) 0
error (256)
LPAREN_TOK (258) 10 11 17 44 58 59 64 79
RPAREN_TOK (259) 10 11 17 44 58 59 64 79
CURL_LPAREN_TOK (260) 21
CURL_RPAREN_TOK (261) 21
DEFINE_TOK (262)
EQ_TOK (263) 6 8 48 49 72
GT_TOK (264) 66
LT_TOK (265) 65
MINUS_TOK (266) 81
PLUS_TOK (267) 80
MULT_TOK (268) 83
DIVIDE_TOK (269) 84
MOD_TOK (270) 85
XOR_TOK (271)
NOT_TOK (272) 62
AND_TOK (273) 61
OR_TOK (274) 60
SEMICOLON_TOK (275) 5 6 12 17 24 30 35 47 49 50 51
COMMA_TOK (276) 7 8 15 16 18 48 52 56
WHILE_TOK (277) 43
FOR_TOK (278) 44
IF_TOK (279) 41 42
ELSE_TOK (280) 42
COMPARE_TOK (281) 69
GTEQ_TOK (282) 67
LTEQ_TOK (283) 68
NOT_EQ_TOK (284) 70
BIT_AND_TOK (285)
BIT_OR_TOK (286)
PLUS_EQ_TOK (287) 73
MINUS_EQ_TOK (288) 74
MULT_EQ_TOK (289) 75
DIVIDE_EQ_TOK (290) 76
RIGHT_SHIFT_TOK (291)
LEFT_SHIFT_TOK (292)
MINUS_MINUS_TOK (293) 90 92
PLUS_PLUS_TOK (294) 89 91
MOD_EQ_TOK (295) 77
ERROR_TOK (296)
MAIN_TOK (297)
RETURN_TOK (298) 12
INTCONST (299) 94
TYPE_TOK (300) 5 6 10 13 15 16
DOUBLECONST (301) 95
CHARCONST (302) 96
ID_TOK (303) 5 6 7 8 10 11 13 15 16 17 48 49 72 73 74 75 76 77 89 90
    91 92 93


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
DEBUG (50)
    on left: 1, on right: 0
START (51)
    on left: 2 3 4, on right: 1 2 3
vardec (52)
    on left: 5 6, on right: 2 22 46
vardecex (53)
    on left: 7 8 9, on right: 5 6 7 8
funcdef (54)
    on left: 10 11, on right: 3
returnstatement (55)
    on left: 12, on right: 27 33 38
arglist (56)
    on left: 13 14, on right: 10 11
arglistex (57)
    on left: 15 16, on right: 13 15
funccall (58)
    on left: 17, on right: 28 34 39 88
paramlist (59)
    on left: 18 19, on right: 17 18
block (60)
    on left: 21, on right: 10 11 29
$@1 (61)
    on left: 20, on right: 21
vardeclines (62)
    on left: 22 23, on right: 21 22
nonfunctionblock (63)
    on left: 24 25 26 27 28 29, on right: 41 42 43 44
statements (64)
    on left: 30 31 32 33 34 35 36 37 38 39 40, on right: 21 30 31 32
    33 34
ifstatement (65)
    on left: 41 42, on right: 25 31 36
loopstatement (66)
    on left: 43 44, on right: 26 32 37
forpart1 (67)
    on left: 45 46 47, on right: 44
varinitlist (68)
    on left: 48 49, on right: 45 48
forpart2 (69)
    on left: 50 51, on right: 44
forpart2ex (70)
    on left: 52 53, on right: 50 52
forpart3 (71)
    on left: 54 55, on right: 44
forpart3ex (72)
    on left: 56 57, on right: 54 56
condexp (73)
    on left: 58, on right: 41 42 43
exp4 (74)
    on left: 59 60 61 62 63, on right: 50 52 58 59 60 61 62
exp3 (75)
    on left: 64 65 66 67 68 69 70 71, on right: 60 61 63 64
exp (76)
    on left: 72 73 74 75 76 77 78, on right: 18 19 24 30 35 54 56
exp2 (77)
    on left: 79 80 81 82, on right: 6 8 12 48 49 65 66 67 68 69 70
    71 72 73 74 75 76 77 79 80 81
exp1 (78)
    on left: 83 84 85 86 87 88, on right: 80 81 82 83 84 85
exp0 (79)
    on left: 89 90 91 92, on right: 78 87
var (80)
    on left: 93 94 95 96, on right: 83 84 85 86


State 0

    0 $accept: . DEBUG $end

    TYPE_TOK  shift, and go to state 1
    ID_TOK    shift, and go to state 2

    $default  reduce using rule 4 (START)

    DEBUG    go to state 3
    START    go to state 4
    vardec   go to state 5
    funcdef  go to state 6


State 1

    5 vardec: TYPE_TOK . ID_TOK vardecex SEMICOLON_TOK
    6       | TYPE_TOK . ID_TOK EQ_TOK exp2 vardecex SEMICOLON_TOK
   10 funcdef: TYPE_TOK . ID_TOK LPAREN_TOK arglist RPAREN_TOK block

    ID_TOK  shift, and go to state 7


State 2

   11 funcdef: ID_TOK . LPAREN_TOK arglist RPAREN_TOK block

    LPAREN_TOK  shift, and go to state 8


State 3

    0 $accept: DEBUG . $end

    $end  shift, and go to state 9


State 4

    1 DEBUG: START .

    $default  reduce using rule 1 (DEBUG)


State 5

    2 START: vardec . START

    TYPE_TOK  shift, and go to state 1
    ID_TOK    shift, and go to state 2

    $default  reduce using rule 4 (START)

    START    go to state 10
    vardec   go to state 5
    funcdef  go to state 6


State 6

    3 START: funcdef . START

    TYPE_TOK  shift, and go to state 1
    ID_TOK    shift, and go to state 2

    $default  reduce using rule 4 (START)

    START    go to state 11
    vardec   go to state 5
    funcdef  go to state 6


State 7

    5 vardec: TYPE_TOK ID_TOK . vardecex SEMICOLON_TOK
    6       | TYPE_TOK ID_TOK . EQ_TOK exp2 vardecex SEMICOLON_TOK
   10 funcdef: TYPE_TOK ID_TOK . LPAREN_TOK arglist RPAREN_TOK block

    LPAREN_TOK  shift, and go to state 12
    EQ_TOK      shift, and go to state 13

    $default  reduce using rule 9 (vardecex)

    vardecex  go to state 14


State 8

   11 funcdef: ID_TOK LPAREN_TOK . arglist RPAREN_TOK block

    TYPE_TOK  shift, and go to state 15

    $default  reduce using rule 14 (arglist)

    arglist  go to state 16


State 9

    0 $accept: DEBUG $end .

    $default  accept


State 10

    2 START: vardec START .

    $default  reduce using rule 2 (START)


State 11

    3 START: funcdef START .

    $default  reduce using rule 3 (START)


State 12

   10 funcdef: TYPE_TOK ID_TOK LPAREN_TOK . arglist RPAREN_TOK block

    TYPE_TOK  shift, and go to state 15

    $default  reduce using rule 14 (arglist)

    arglist  go to state 17


State 13

    6 vardec: TYPE_TOK ID_TOK EQ_TOK . exp2 vardecex SEMICOLON_TOK

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 26
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 14

    5 vardec: TYPE_TOK ID_TOK vardecex . SEMICOLON_TOK
    7 vardecex: vardecex . COMMA_TOK ID_TOK
    8         | vardecex . COMMA_TOK ID_TOK EQ_TOK exp2

    SEMICOLON_TOK  shift, and go to state 30
    COMMA_TOK      shift, and go to state 31


State 15

   13 arglist: TYPE_TOK . ID_TOK arglistex

    ID_TOK  shift, and go to state 32


State 16

   11 funcdef: ID_TOK LPAREN_TOK arglist . RPAREN_TOK block

    RPAREN_TOK  shift, and go to state 33


State 17

   10 funcdef: TYPE_TOK ID_TOK LPAREN_TOK arglist . RPAREN_TOK block

    RPAREN_TOK  shift, and go to state 34


State 18

   79 exp2: LPAREN_TOK . exp2 RPAREN_TOK

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 35
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 19

   92 exp0: MINUS_MINUS_TOK . ID_TOK

    ID_TOK  shift, and go to state 36


State 20

   91 exp0: PLUS_PLUS_TOK . ID_TOK

    ID_TOK  shift, and go to state 37


State 21

   94 var: INTCONST .

    $default  reduce using rule 94 (var)


State 22

   95 var: DOUBLECONST .

    $default  reduce using rule 95 (var)


State 23

   96 var: CHARCONST .

    $default  reduce using rule 96 (var)


State 24

   17 funccall: ID_TOK . LPAREN_TOK paramlist RPAREN_TOK SEMICOLON_TOK
   89 exp0: ID_TOK . PLUS_PLUS_TOK
   90     | ID_TOK . MINUS_MINUS_TOK
   93 var: ID_TOK .

    LPAREN_TOK       shift, and go to state 38
    MINUS_MINUS_TOK  shift, and go to state 39
    PLUS_PLUS_TOK    shift, and go to state 40

    $default  reduce using rule 93 (var)


State 25

   88 exp1: funccall .

    $default  reduce using rule 88 (exp1)


State 26

    6 vardec: TYPE_TOK ID_TOK EQ_TOK exp2 . vardecex SEMICOLON_TOK

    $default  reduce using rule 9 (vardecex)

    vardecex  go to state 41


State 27

   80 exp2: exp1 . PLUS_TOK exp2
   81     | exp1 . MINUS_TOK exp2
   82     | exp1 .

    MINUS_TOK  shift, and go to state 42
    PLUS_TOK   shift, and go to state 43

    $default  reduce using rule 82 (exp2)


State 28

   87 exp1: exp0 .

    $default  reduce using rule 87 (exp1)


State 29

   83 exp1: var . MULT_TOK exp1
   84     | var . DIVIDE_TOK exp1
   85     | var . MOD_TOK exp1
   86     | var .

    MULT_TOK    shift, and go to state 44
    DIVIDE_TOK  shift, and go to state 45
    MOD_TOK     shift, and go to state 46

    $default  reduce using rule 86 (exp1)


State 30

    5 vardec: TYPE_TOK ID_TOK vardecex SEMICOLON_TOK .

    $default  reduce using rule 5 (vardec)


State 31

    7 vardecex: vardecex COMMA_TOK . ID_TOK
    8         | vardecex COMMA_TOK . ID_TOK EQ_TOK exp2

    ID_TOK  shift, and go to state 47


State 32

   13 arglist: TYPE_TOK ID_TOK . arglistex

    COMMA_TOK  shift, and go to state 48

    arglistex  go to state 49


State 33

   11 funcdef: ID_TOK LPAREN_TOK arglist RPAREN_TOK . block

    CURL_LPAREN_TOK  shift, and go to state 50

    block  go to state 51


State 34

   10 funcdef: TYPE_TOK ID_TOK LPAREN_TOK arglist RPAREN_TOK . block

    CURL_LPAREN_TOK  shift, and go to state 50

    block  go to state 52


State 35

   79 exp2: LPAREN_TOK exp2 . RPAREN_TOK

    RPAREN_TOK  shift, and go to state 53


State 36

   92 exp0: MINUS_MINUS_TOK ID_TOK .

    $default  reduce using rule 92 (exp0)


State 37

   91 exp0: PLUS_PLUS_TOK ID_TOK .

    $default  reduce using rule 91 (exp0)


State 38

   17 funccall: ID_TOK LPAREN_TOK . paramlist RPAREN_TOK SEMICOLON_TOK

    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    ID_TOK           shift, and go to state 54

    paramlist  go to state 55
    exp        go to state 56
    exp0       go to state 57


State 39

   90 exp0: ID_TOK MINUS_MINUS_TOK .

    $default  reduce using rule 90 (exp0)


State 40

   89 exp0: ID_TOK PLUS_PLUS_TOK .

    $default  reduce using rule 89 (exp0)


State 41

    6 vardec: TYPE_TOK ID_TOK EQ_TOK exp2 vardecex . SEMICOLON_TOK
    7 vardecex: vardecex . COMMA_TOK ID_TOK
    8         | vardecex . COMMA_TOK ID_TOK EQ_TOK exp2

    SEMICOLON_TOK  shift, and go to state 58
    COMMA_TOK      shift, and go to state 31


State 42

   81 exp2: exp1 MINUS_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 59
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 43

   80 exp2: exp1 PLUS_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 60
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 44

   83 exp1: var MULT_TOK . exp1

    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp1      go to state 61
    exp0      go to state 28
    var       go to state 29


State 45

   84 exp1: var DIVIDE_TOK . exp1

    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp1      go to state 62
    exp0      go to state 28
    var       go to state 29


State 46

   85 exp1: var MOD_TOK . exp1

    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp1      go to state 63
    exp0      go to state 28
    var       go to state 29


State 47

    7 vardecex: vardecex COMMA_TOK ID_TOK .
    8         | vardecex COMMA_TOK ID_TOK . EQ_TOK exp2

    EQ_TOK  shift, and go to state 64

    $default  reduce using rule 7 (vardecex)


State 48

   15 arglistex: COMMA_TOK . TYPE_TOK ID_TOK arglistex
   16          | COMMA_TOK . TYPE_TOK ID_TOK

    TYPE_TOK  shift, and go to state 65


State 49

   13 arglist: TYPE_TOK ID_TOK arglistex .

    $default  reduce using rule 13 (arglist)


State 50

   21 block: CURL_LPAREN_TOK . $@1 vardeclines statements CURL_RPAREN_TOK

    $default  reduce using rule 20 ($@1)

    $@1  go to state 66


State 51

   11 funcdef: ID_TOK LPAREN_TOK arglist RPAREN_TOK block .

    $default  reduce using rule 11 (funcdef)


State 52

   10 funcdef: TYPE_TOK ID_TOK LPAREN_TOK arglist RPAREN_TOK block .

    $default  reduce using rule 10 (funcdef)


State 53

   79 exp2: LPAREN_TOK exp2 RPAREN_TOK .

    $default  reduce using rule 79 (exp2)


State 54

   72 exp: ID_TOK . EQ_TOK exp2
   73    | ID_TOK . PLUS_EQ_TOK exp2
   74    | ID_TOK . MINUS_EQ_TOK exp2
   75    | ID_TOK . MULT_EQ_TOK exp2
   76    | ID_TOK . DIVIDE_EQ_TOK exp2
   77    | ID_TOK . MOD_EQ_TOK exp2
   89 exp0: ID_TOK . PLUS_PLUS_TOK
   90     | ID_TOK . MINUS_MINUS_TOK

    EQ_TOK           shift, and go to state 67
    PLUS_EQ_TOK      shift, and go to state 68
    MINUS_EQ_TOK     shift, and go to state 69
    MULT_EQ_TOK      shift, and go to state 70
    DIVIDE_EQ_TOK    shift, and go to state 71
    MINUS_MINUS_TOK  shift, and go to state 39
    PLUS_PLUS_TOK    shift, and go to state 40
    MOD_EQ_TOK       shift, and go to state 72


State 55

   17 funccall: ID_TOK LPAREN_TOK paramlist . RPAREN_TOK SEMICOLON_TOK

    RPAREN_TOK  shift, and go to state 73


State 56

   18 paramlist: exp . COMMA_TOK paramlist
   19          | exp .

    COMMA_TOK  shift, and go to state 74

    $default  reduce using rule 19 (paramlist)


State 57

   78 exp: exp0 .

    $default  reduce using rule 78 (exp)


State 58

    6 vardec: TYPE_TOK ID_TOK EQ_TOK exp2 vardecex SEMICOLON_TOK .

    $default  reduce using rule 6 (vardec)


State 59

   81 exp2: exp1 MINUS_TOK exp2 .

    $default  reduce using rule 81 (exp2)


State 60

   80 exp2: exp1 PLUS_TOK exp2 .

    $default  reduce using rule 80 (exp2)


State 61

   83 exp1: var MULT_TOK exp1 .

    $default  reduce using rule 83 (exp1)


State 62

   84 exp1: var DIVIDE_TOK exp1 .

    $default  reduce using rule 84 (exp1)


State 63

   85 exp1: var MOD_TOK exp1 .

    $default  reduce using rule 85 (exp1)


State 64

    8 vardecex: vardecex COMMA_TOK ID_TOK EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 75
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 65

   15 arglistex: COMMA_TOK TYPE_TOK . ID_TOK arglistex
   16          | COMMA_TOK TYPE_TOK . ID_TOK

    ID_TOK  shift, and go to state 76


State 66

   21 block: CURL_LPAREN_TOK $@1 . vardeclines statements CURL_RPAREN_TOK

    $default  reduce using rule 23 (vardeclines)

    vardeclines  go to state 77


State 67

   72 exp: ID_TOK EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 78
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 68

   73 exp: ID_TOK PLUS_EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 79
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 69

   74 exp: ID_TOK MINUS_EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 80
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 70

   75 exp: ID_TOK MULT_EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 81
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 71

   76 exp: ID_TOK DIVIDE_EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 82
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 72

   77 exp: ID_TOK MOD_EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 83
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 73

   17 funccall: ID_TOK LPAREN_TOK paramlist RPAREN_TOK . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 84


State 74

   18 paramlist: exp COMMA_TOK . paramlist

    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    ID_TOK           shift, and go to state 54

    paramlist  go to state 85
    exp        go to state 56
    exp0       go to state 57


State 75

    8 vardecex: vardecex COMMA_TOK ID_TOK EQ_TOK exp2 .

    $default  reduce using rule 8 (vardecex)


State 76

   15 arglistex: COMMA_TOK TYPE_TOK ID_TOK . arglistex
   16          | COMMA_TOK TYPE_TOK ID_TOK .

    COMMA_TOK  shift, and go to state 48

    $default  reduce using rule 16 (arglistex)

    arglistex  go to state 86


State 77

   21 block: CURL_LPAREN_TOK $@1 vardeclines . statements CURL_RPAREN_TOK
   22 vardeclines: vardeclines . vardec

    WHILE_TOK        shift, and go to state 87
    FOR_TOK          shift, and go to state 88
    IF_TOK           shift, and go to state 89
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 90
    TYPE_TOK         shift, and go to state 91
    ID_TOK           shift, and go to state 92

    $default  reduce using rule 40 (statements)

    vardec           go to state 93
    returnstatement  go to state 94
    funccall         go to state 95
    statements       go to state 96
    ifstatement      go to state 97
    loopstatement    go to state 98
    exp              go to state 99
    exp0             go to state 57


State 78

   72 exp: ID_TOK EQ_TOK exp2 .

    $default  reduce using rule 72 (exp)


State 79

   73 exp: ID_TOK PLUS_EQ_TOK exp2 .

    $default  reduce using rule 73 (exp)


State 80

   74 exp: ID_TOK MINUS_EQ_TOK exp2 .

    $default  reduce using rule 74 (exp)


State 81

   75 exp: ID_TOK MULT_EQ_TOK exp2 .

    $default  reduce using rule 75 (exp)


State 82

   76 exp: ID_TOK DIVIDE_EQ_TOK exp2 .

    $default  reduce using rule 76 (exp)


State 83

   77 exp: ID_TOK MOD_EQ_TOK exp2 .

    $default  reduce using rule 77 (exp)


State 84

   17 funccall: ID_TOK LPAREN_TOK paramlist RPAREN_TOK SEMICOLON_TOK .

    $default  reduce using rule 17 (funccall)


State 85

   18 paramlist: exp COMMA_TOK paramlist .

    $default  reduce using rule 18 (paramlist)


State 86

   15 arglistex: COMMA_TOK TYPE_TOK ID_TOK arglistex .

    $default  reduce using rule 15 (arglistex)


State 87

   43 loopstatement: WHILE_TOK . condexp nonfunctionblock

    LPAREN_TOK  shift, and go to state 100

    condexp  go to state 101


State 88

   44 loopstatement: FOR_TOK . LPAREN_TOK forpart1 forpart2 forpart3 RPAREN_TOK nonfunctionblock

    LPAREN_TOK  shift, and go to state 102


State 89

   41 ifstatement: IF_TOK . condexp nonfunctionblock
   42            | IF_TOK . condexp nonfunctionblock ELSE_TOK nonfunctionblock

    LPAREN_TOK  shift, and go to state 100

    condexp  go to state 103


State 90

   12 returnstatement: RETURN_TOK . exp2 SEMICOLON_TOK

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 104
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 91

    5 vardec: TYPE_TOK . ID_TOK vardecex SEMICOLON_TOK
    6       | TYPE_TOK . ID_TOK EQ_TOK exp2 vardecex SEMICOLON_TOK

    ID_TOK  shift, and go to state 105


State 92

   17 funccall: ID_TOK . LPAREN_TOK paramlist RPAREN_TOK SEMICOLON_TOK
   72 exp: ID_TOK . EQ_TOK exp2
   73    | ID_TOK . PLUS_EQ_TOK exp2
   74    | ID_TOK . MINUS_EQ_TOK exp2
   75    | ID_TOK . MULT_EQ_TOK exp2
   76    | ID_TOK . DIVIDE_EQ_TOK exp2
   77    | ID_TOK . MOD_EQ_TOK exp2
   89 exp0: ID_TOK . PLUS_PLUS_TOK
   90     | ID_TOK . MINUS_MINUS_TOK

    LPAREN_TOK       shift, and go to state 38
    EQ_TOK           shift, and go to state 67
    PLUS_EQ_TOK      shift, and go to state 68
    MINUS_EQ_TOK     shift, and go to state 69
    MULT_EQ_TOK      shift, and go to state 70
    DIVIDE_EQ_TOK    shift, and go to state 71
    MINUS_MINUS_TOK  shift, and go to state 39
    PLUS_PLUS_TOK    shift, and go to state 40
    MOD_EQ_TOK       shift, and go to state 72


State 93

   22 vardeclines: vardeclines vardec .

    $default  reduce using rule 22 (vardeclines)


State 94

   33 statements: returnstatement . statements
   38           | returnstatement .

    WHILE_TOK        shift, and go to state 87
    FOR_TOK          shift, and go to state 88
    IF_TOK           shift, and go to state 89
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 90
    ID_TOK           shift, and go to state 92

    CURL_RPAREN_TOK  reduce using rule 38 (statements)
    CURL_RPAREN_TOK  [reduce using rule 40 (statements)]
    $default         reduce using rule 38 (statements)

    returnstatement  go to state 94
    funccall         go to state 95
    statements       go to state 106
    ifstatement      go to state 97
    loopstatement    go to state 98
    exp              go to state 99
    exp0             go to state 57


State 95

   34 statements: funccall . statements
   39           | funccall .

    WHILE_TOK        shift, and go to state 87
    FOR_TOK          shift, and go to state 88
    IF_TOK           shift, and go to state 89
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 90
    ID_TOK           shift, and go to state 92

    CURL_RPAREN_TOK  reduce using rule 39 (statements)
    CURL_RPAREN_TOK  [reduce using rule 40 (statements)]
    $default         reduce using rule 39 (statements)

    returnstatement  go to state 94
    funccall         go to state 95
    statements       go to state 107
    ifstatement      go to state 97
    loopstatement    go to state 98
    exp              go to state 99
    exp0             go to state 57


State 96

   21 block: CURL_LPAREN_TOK $@1 vardeclines statements . CURL_RPAREN_TOK

    CURL_RPAREN_TOK  shift, and go to state 108


State 97

   31 statements: ifstatement . statements
   36           | ifstatement .

    WHILE_TOK        shift, and go to state 87
    FOR_TOK          shift, and go to state 88
    IF_TOK           shift, and go to state 89
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 90
    ID_TOK           shift, and go to state 92

    CURL_RPAREN_TOK  reduce using rule 36 (statements)
    CURL_RPAREN_TOK  [reduce using rule 40 (statements)]
    $default         reduce using rule 36 (statements)

    returnstatement  go to state 94
    funccall         go to state 95
    statements       go to state 109
    ifstatement      go to state 97
    loopstatement    go to state 98
    exp              go to state 99
    exp0             go to state 57


State 98

   32 statements: loopstatement . statements
   37           | loopstatement .

    WHILE_TOK        shift, and go to state 87
    FOR_TOK          shift, and go to state 88
    IF_TOK           shift, and go to state 89
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 90
    ID_TOK           shift, and go to state 92

    CURL_RPAREN_TOK  reduce using rule 37 (statements)
    CURL_RPAREN_TOK  [reduce using rule 40 (statements)]
    $default         reduce using rule 37 (statements)

    returnstatement  go to state 94
    funccall         go to state 95
    statements       go to state 110
    ifstatement      go to state 97
    loopstatement    go to state 98
    exp              go to state 99
    exp0             go to state 57


State 99

   30 statements: exp . SEMICOLON_TOK statements
   35           | exp . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 111


State 100

   58 condexp: LPAREN_TOK . exp4 RPAREN_TOK

    LPAREN_TOK       shift, and go to state 112
    NOT_TOK          shift, and go to state 113
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp4      go to state 114
    exp3      go to state 115
    exp2      go to state 116
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 101

   43 loopstatement: WHILE_TOK condexp . nonfunctionblock

    CURL_LPAREN_TOK  shift, and go to state 50
    WHILE_TOK        shift, and go to state 87
    FOR_TOK          shift, and go to state 88
    IF_TOK           shift, and go to state 89
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 90
    ID_TOK           shift, and go to state 92

    returnstatement   go to state 117
    funccall          go to state 118
    block             go to state 119
    nonfunctionblock  go to state 120
    ifstatement       go to state 121
    loopstatement     go to state 122
    exp               go to state 123
    exp0              go to state 57


State 102

   44 loopstatement: FOR_TOK LPAREN_TOK . forpart1 forpart2 forpart3 RPAREN_TOK nonfunctionblock

    SEMICOLON_TOK  shift, and go to state 124
    TYPE_TOK       shift, and go to state 91
    ID_TOK         shift, and go to state 125

    vardec       go to state 126
    forpart1     go to state 127
    varinitlist  go to state 128


State 103

   41 ifstatement: IF_TOK condexp . nonfunctionblock
   42            | IF_TOK condexp . nonfunctionblock ELSE_TOK nonfunctionblock

    CURL_LPAREN_TOK  shift, and go to state 50
    WHILE_TOK        shift, and go to state 87
    FOR_TOK          shift, and go to state 88
    IF_TOK           shift, and go to state 89
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 90
    ID_TOK           shift, and go to state 92

    returnstatement   go to state 117
    funccall          go to state 118
    block             go to state 119
    nonfunctionblock  go to state 129
    ifstatement       go to state 121
    loopstatement     go to state 122
    exp               go to state 123
    exp0              go to state 57


State 104

   12 returnstatement: RETURN_TOK exp2 . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 130


State 105

    5 vardec: TYPE_TOK ID_TOK . vardecex SEMICOLON_TOK
    6       | TYPE_TOK ID_TOK . EQ_TOK exp2 vardecex SEMICOLON_TOK

    EQ_TOK  shift, and go to state 13

    $default  reduce using rule 9 (vardecex)

    vardecex  go to state 14


State 106

   33 statements: returnstatement statements .

    $default  reduce using rule 33 (statements)


State 107

   34 statements: funccall statements .

    $default  reduce using rule 34 (statements)


State 108

   21 block: CURL_LPAREN_TOK $@1 vardeclines statements CURL_RPAREN_TOK .

    $default  reduce using rule 21 (block)


State 109

   31 statements: ifstatement statements .

    $default  reduce using rule 31 (statements)


State 110

   32 statements: loopstatement statements .

    $default  reduce using rule 32 (statements)


State 111

   30 statements: exp SEMICOLON_TOK . statements
   35           | exp SEMICOLON_TOK .

    WHILE_TOK        shift, and go to state 87
    FOR_TOK          shift, and go to state 88
    IF_TOK           shift, and go to state 89
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 90
    ID_TOK           shift, and go to state 92

    CURL_RPAREN_TOK  reduce using rule 35 (statements)
    CURL_RPAREN_TOK  [reduce using rule 40 (statements)]
    $default         reduce using rule 35 (statements)

    returnstatement  go to state 94
    funccall         go to state 95
    statements       go to state 131
    ifstatement      go to state 97
    loopstatement    go to state 98
    exp              go to state 99
    exp0             go to state 57


State 112

   59 exp4: LPAREN_TOK . exp4 RPAREN_TOK
   64 exp3: LPAREN_TOK . exp3 RPAREN_TOK
   79 exp2: LPAREN_TOK . exp2 RPAREN_TOK

    LPAREN_TOK       shift, and go to state 112
    NOT_TOK          shift, and go to state 113
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp4      go to state 132
    exp3      go to state 133
    exp2      go to state 134
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 113

   62 exp4: NOT_TOK . exp4

    LPAREN_TOK       shift, and go to state 112
    NOT_TOK          shift, and go to state 113
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp4      go to state 135
    exp3      go to state 115
    exp2      go to state 116
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 114

   58 condexp: LPAREN_TOK exp4 . RPAREN_TOK

    RPAREN_TOK  shift, and go to state 136


State 115

   60 exp4: exp3 . OR_TOK exp4
   61     | exp3 . AND_TOK exp4
   63     | exp3 .

    AND_TOK  shift, and go to state 137
    OR_TOK   shift, and go to state 138

    $default  reduce using rule 63 (exp4)


State 116

   65 exp3: exp2 . LT_TOK exp2
   66     | exp2 . GT_TOK exp2
   67     | exp2 . GTEQ_TOK exp2
   68     | exp2 . LTEQ_TOK exp2
   69     | exp2 . COMPARE_TOK exp2
   70     | exp2 . NOT_EQ_TOK exp2
   71     | exp2 .

    GT_TOK       shift, and go to state 139
    LT_TOK       shift, and go to state 140
    COMPARE_TOK  shift, and go to state 141
    GTEQ_TOK     shift, and go to state 142
    LTEQ_TOK     shift, and go to state 143
    NOT_EQ_TOK   shift, and go to state 144

    $default  reduce using rule 71 (exp3)


State 117

   27 nonfunctionblock: returnstatement .

    $default  reduce using rule 27 (nonfunctionblock)


State 118

   28 nonfunctionblock: funccall .

    $default  reduce using rule 28 (nonfunctionblock)


State 119

   29 nonfunctionblock: block .

    $default  reduce using rule 29 (nonfunctionblock)


State 120

   43 loopstatement: WHILE_TOK condexp nonfunctionblock .

    $default  reduce using rule 43 (loopstatement)


State 121

   25 nonfunctionblock: ifstatement .

    $default  reduce using rule 25 (nonfunctionblock)


State 122

   26 nonfunctionblock: loopstatement .

    $default  reduce using rule 26 (nonfunctionblock)


State 123

   24 nonfunctionblock: exp . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 145


State 124

   47 forpart1: SEMICOLON_TOK .

    $default  reduce using rule 47 (forpart1)


State 125

   48 varinitlist: ID_TOK . EQ_TOK exp2 COMMA_TOK varinitlist
   49            | ID_TOK . EQ_TOK exp2 SEMICOLON_TOK

    EQ_TOK  shift, and go to state 146


State 126

   46 forpart1: vardec .

    $default  reduce using rule 46 (forpart1)


State 127

   44 loopstatement: FOR_TOK LPAREN_TOK forpart1 . forpart2 forpart3 RPAREN_TOK nonfunctionblock

    LPAREN_TOK       shift, and go to state 112
    NOT_TOK          shift, and go to state 113
    SEMICOLON_TOK    shift, and go to state 147
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    forpart2  go to state 148
    exp4      go to state 149
    exp3      go to state 115
    exp2      go to state 116
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 128

   45 forpart1: varinitlist .

    $default  reduce using rule 45 (forpart1)


State 129

   41 ifstatement: IF_TOK condexp nonfunctionblock .
   42            | IF_TOK condexp nonfunctionblock . ELSE_TOK nonfunctionblock

    ELSE_TOK  shift, and go to state 150

    ELSE_TOK  [reduce using rule 41 (ifstatement)]
    $default  reduce using rule 41 (ifstatement)


State 130

   12 returnstatement: RETURN_TOK exp2 SEMICOLON_TOK .

    $default  reduce using rule 12 (returnstatement)


State 131

   30 statements: exp SEMICOLON_TOK statements .

    $default  reduce using rule 30 (statements)


State 132

   59 exp4: LPAREN_TOK exp4 . RPAREN_TOK

    RPAREN_TOK  shift, and go to state 151


State 133

   60 exp4: exp3 . OR_TOK exp4
   61     | exp3 . AND_TOK exp4
   63     | exp3 .
   64 exp3: LPAREN_TOK exp3 . RPAREN_TOK

    RPAREN_TOK  shift, and go to state 152
    AND_TOK     shift, and go to state 137
    OR_TOK      shift, and go to state 138

    RPAREN_TOK  [reduce using rule 63 (exp4)]


State 134

   65 exp3: exp2 . LT_TOK exp2
   66     | exp2 . GT_TOK exp2
   67     | exp2 . GTEQ_TOK exp2
   68     | exp2 . LTEQ_TOK exp2
   69     | exp2 . COMPARE_TOK exp2
   70     | exp2 . NOT_EQ_TOK exp2
   71     | exp2 .
   79 exp2: LPAREN_TOK exp2 . RPAREN_TOK

    RPAREN_TOK   shift, and go to state 53
    GT_TOK       shift, and go to state 139
    LT_TOK       shift, and go to state 140
    COMPARE_TOK  shift, and go to state 141
    GTEQ_TOK     shift, and go to state 142
    LTEQ_TOK     shift, and go to state 143
    NOT_EQ_TOK   shift, and go to state 144

    RPAREN_TOK  [reduce using rule 71 (exp3)]
    $default    reduce using rule 71 (exp3)


State 135

   62 exp4: NOT_TOK exp4 .

    $default  reduce using rule 62 (exp4)


State 136

   58 condexp: LPAREN_TOK exp4 RPAREN_TOK .

    $default  reduce using rule 58 (condexp)


State 137

   61 exp4: exp3 AND_TOK . exp4

    LPAREN_TOK       shift, and go to state 112
    NOT_TOK          shift, and go to state 113
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp4      go to state 153
    exp3      go to state 115
    exp2      go to state 116
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 138

   60 exp4: exp3 OR_TOK . exp4

    LPAREN_TOK       shift, and go to state 112
    NOT_TOK          shift, and go to state 113
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp4      go to state 154
    exp3      go to state 115
    exp2      go to state 116
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 139

   66 exp3: exp2 GT_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 155
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 140

   65 exp3: exp2 LT_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 156
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 141

   69 exp3: exp2 COMPARE_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 157
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 142

   67 exp3: exp2 GTEQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 158
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 143

   68 exp3: exp2 LTEQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 159
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 144

   70 exp3: exp2 NOT_EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 160
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 145

   24 nonfunctionblock: exp SEMICOLON_TOK .

    $default  reduce using rule 24 (nonfunctionblock)


State 146

   48 varinitlist: ID_TOK EQ_TOK . exp2 COMMA_TOK varinitlist
   49            | ID_TOK EQ_TOK . exp2 SEMICOLON_TOK

    LPAREN_TOK       shift, and go to state 18
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp2      go to state 161
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 147

   51 forpart2: SEMICOLON_TOK .

    $default  reduce using rule 51 (forpart2)


State 148

   44 loopstatement: FOR_TOK LPAREN_TOK forpart1 forpart2 . forpart3 RPAREN_TOK nonfunctionblock

    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    ID_TOK           shift, and go to state 54

    $default  reduce using rule 55 (forpart3)

    forpart3  go to state 162
    exp       go to state 163
    exp0      go to state 57


State 149

   50 forpart2: exp4 . forpart2ex SEMICOLON_TOK

    COMMA_TOK  shift, and go to state 164

    $default  reduce using rule 53 (forpart2ex)

    forpart2ex  go to state 165


State 150

   42 ifstatement: IF_TOK condexp nonfunctionblock ELSE_TOK . nonfunctionblock

    CURL_LPAREN_TOK  shift, and go to state 50
    WHILE_TOK        shift, and go to state 87
    FOR_TOK          shift, and go to state 88
    IF_TOK           shift, and go to state 89
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 90
    ID_TOK           shift, and go to state 92

    returnstatement   go to state 117
    funccall          go to state 118
    block             go to state 119
    nonfunctionblock  go to state 166
    ifstatement       go to state 121
    loopstatement     go to state 122
    exp               go to state 123
    exp0              go to state 57


State 151

   59 exp4: LPAREN_TOK exp4 RPAREN_TOK .

    $default  reduce using rule 59 (exp4)


State 152

   64 exp3: LPAREN_TOK exp3 RPAREN_TOK .

    $default  reduce using rule 64 (exp3)


State 153

   61 exp4: exp3 AND_TOK exp4 .

    $default  reduce using rule 61 (exp4)


State 154

   60 exp4: exp3 OR_TOK exp4 .

    $default  reduce using rule 60 (exp4)


State 155

   66 exp3: exp2 GT_TOK exp2 .

    $default  reduce using rule 66 (exp3)


State 156

   65 exp3: exp2 LT_TOK exp2 .

    $default  reduce using rule 65 (exp3)


State 157

   69 exp3: exp2 COMPARE_TOK exp2 .

    $default  reduce using rule 69 (exp3)


State 158

   67 exp3: exp2 GTEQ_TOK exp2 .

    $default  reduce using rule 67 (exp3)


State 159

   68 exp3: exp2 LTEQ_TOK exp2 .

    $default  reduce using rule 68 (exp3)


State 160

   70 exp3: exp2 NOT_EQ_TOK exp2 .

    $default  reduce using rule 70 (exp3)


State 161

   48 varinitlist: ID_TOK EQ_TOK exp2 . COMMA_TOK varinitlist
   49            | ID_TOK EQ_TOK exp2 . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 167
    COMMA_TOK      shift, and go to state 168


State 162

   44 loopstatement: FOR_TOK LPAREN_TOK forpart1 forpart2 forpart3 . RPAREN_TOK nonfunctionblock

    RPAREN_TOK  shift, and go to state 169


State 163

   54 forpart3: exp . forpart3ex

    COMMA_TOK  shift, and go to state 170

    $default  reduce using rule 57 (forpart3ex)

    forpart3ex  go to state 171


State 164

   52 forpart2ex: COMMA_TOK . exp4 forpart2ex

    LPAREN_TOK       shift, and go to state 112
    NOT_TOK          shift, and go to state 113
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    INTCONST         shift, and go to state 21
    DOUBLECONST      shift, and go to state 22
    CHARCONST        shift, and go to state 23
    ID_TOK           shift, and go to state 24

    funccall  go to state 25
    exp4      go to state 172
    exp3      go to state 115
    exp2      go to state 116
    exp1      go to state 27
    exp0      go to state 28
    var       go to state 29


State 165

   50 forpart2: exp4 forpart2ex . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 173


State 166

   42 ifstatement: IF_TOK condexp nonfunctionblock ELSE_TOK nonfunctionblock .

    $default  reduce using rule 42 (ifstatement)


State 167

   49 varinitlist: ID_TOK EQ_TOK exp2 SEMICOLON_TOK .

    $default  reduce using rule 49 (varinitlist)


State 168

   48 varinitlist: ID_TOK EQ_TOK exp2 COMMA_TOK . varinitlist

    ID_TOK  shift, and go to state 125

    varinitlist  go to state 174


State 169

   44 loopstatement: FOR_TOK LPAREN_TOK forpart1 forpart2 forpart3 RPAREN_TOK . nonfunctionblock

    CURL_LPAREN_TOK  shift, and go to state 50
    WHILE_TOK        shift, and go to state 87
    FOR_TOK          shift, and go to state 88
    IF_TOK           shift, and go to state 89
    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    RETURN_TOK       shift, and go to state 90
    ID_TOK           shift, and go to state 92

    returnstatement   go to state 117
    funccall          go to state 118
    block             go to state 119
    nonfunctionblock  go to state 175
    ifstatement       go to state 121
    loopstatement     go to state 122
    exp               go to state 123
    exp0              go to state 57


State 170

   56 forpart3ex: COMMA_TOK . exp forpart3ex

    MINUS_MINUS_TOK  shift, and go to state 19
    PLUS_PLUS_TOK    shift, and go to state 20
    ID_TOK           shift, and go to state 54

    exp   go to state 176
    exp0  go to state 57


State 171

   54 forpart3: exp forpart3ex .

    $default  reduce using rule 54 (forpart3)


State 172

   52 forpart2ex: COMMA_TOK exp4 . forpart2ex

    COMMA_TOK  shift, and go to state 164

    $default  reduce using rule 53 (forpart2ex)

    forpart2ex  go to state 177


State 173

   50 forpart2: exp4 forpart2ex SEMICOLON_TOK .

    $default  reduce using rule 50 (forpart2)


State 174

   48 varinitlist: ID_TOK EQ_TOK exp2 COMMA_TOK varinitlist .

    $default  reduce using rule 48 (varinitlist)


State 175

   44 loopstatement: FOR_TOK LPAREN_TOK forpart1 forpart2 forpart3 RPAREN_TOK nonfunctionblock .

    $default  reduce using rule 44 (loopstatement)


State 176

   56 forpart3ex: COMMA_TOK exp . forpart3ex

    COMMA_TOK  shift, and go to state 170

    $default  reduce using rule 57 (forpart3ex)

    forpart3ex  go to state 178


State 177

   52 forpart2ex: COMMA_TOK exp4 forpart2ex .

    $default  reduce using rule 52 (forpart2ex)


State 178

   56 forpart3ex: COMMA_TOK exp forpart3ex .

    $default  reduce using rule 56 (forpart3ex)
