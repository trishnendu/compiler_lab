Terminals unused in grammar

   DEFINE_TOK
   XOR_TOK
   BIT_AND_TOK
   BIT_OR_TOK
   RIGHT_SHIFT_TOK
   LEFT_SHIFT_TOK
   ERROR_TOK


State 129 conflicts: 1 shift/reduce
State 133 conflicts: 1 shift/reduce
State 134 conflicts: 1 shift/reduce
State 151 conflicts: 1 shift/reduce
State 176 conflicts: 1 shift/reduce


Grammar

    0 $accept: DEBUG $end

    1 DEBUG: START

    2 START: vardec START
    3      | funcdef START
    4      | %empty

    5 vardeclines: vardeclines vardec
    6            | %empty

    7 vardec: TYPE_TOK ID_TOK vardecex SEMICOLON_TOK
    8       | TYPE_TOK ID_TOK EQ_TOK exp2 vardecex SEMICOLON_TOK

    9 vardecex: vardecex COMMA_TOK ID_TOK
   10         | vardecex COMMA_TOK ID_TOK EQ_TOK exp2
   11         | %empty

   12 funcdef: TYPE_TOK ID_TOK LPAREN_TOK arglist RPAREN_TOK block
   13        | ID_TOK LPAREN_TOK arglist RPAREN_TOK block

   14 returnstatement: RETURN_TOK exp2 SEMICOLON_TOK

   15 arglist: TYPE_TOK ID_TOK arglistex
   16        | %empty

   17 arglistex: COMMA_TOK TYPE_TOK ID_TOK arglistex
   18          | COMMA_TOK TYPE_TOK ID_TOK

   19 funccall: ID_TOK LPAREN_TOK paramlist RPAREN_TOK SEMICOLON_TOK

   20 paramlist: exp COMMA_TOK paramlist
   21          | exp

   22 block: CURL_LPAREN_TOK vardeclines statements CURL_RPAREN_TOK
   23      | CURL_LPAREN_TOK vardeclines CURL_RPAREN_TOK

   24 nonfunctionblock: exp SEMICOLON_TOK
   25                 | ifstatement
   26                 | loopstatement
   27                 | returnstatement
   28                 | funccall
   29                 | block

   30 statements: exp SEMICOLON_TOK statements
   31           | ifstatement statements
   32           | loopstatement statements
   33           | returnstatement statements
   34           | funccall statements
   35           | exp SEMICOLON_TOK
   36           | ifstatement
   37           | loopstatement
   38           | returnstatement
   39           | funccall

   40 ifstatement: IF_TOK condexp nonfunctionblock ifstatementex
   41            | IF_TOK condexp nonfunctionblock ifstatementex ELSE_TOK nonfunctionblock

   42 ifstatementex: ELSEIF_TOK condexp nonfunctionblock ifstatementex
   43              | %empty

   44 loopstatement: WHILE_TOK condexp nonfunctionblock
   45              | FOR_TOK LPAREN_TOK forpart1 forpart2 forpart3 RPAREN_TOK nonfunctionblock

   46 forpart1: varinitlist
   47         | vardec
   48         | SEMICOLON_TOK

   49 varinitlist: ID_TOK EQ_TOK exp2 COMMA_TOK varinitlist
   50            | ID_TOK EQ_TOK exp2 SEMICOLON_TOK

   51 forpart2: exp4 forpart2ex SEMICOLON_TOK
   52         | SEMICOLON_TOK

   53 forpart2ex: COMMA_TOK exp4 forpart2ex
   54           | %empty

   55 forpart3: exp forpart3ex
   56         | %empty

   57 forpart3ex: COMMA_TOK exp forpart3ex
   58           | %empty

   59 condexp: LPAREN_TOK exp4 RPAREN_TOK

   60 exp4: LPAREN_TOK exp4 RPAREN_TOK
   61     | exp3 OR_TOK exp4
   62     | exp3 AND_TOK exp4
   63     | NOT_TOK exp4
   64     | exp3

   65 exp3: LPAREN_TOK exp3 RPAREN_TOK
   66     | exp2 LT_TOK exp2
   67     | exp2 GT_TOK exp2
   68     | exp2 GTEQ_TOK exp2
   69     | exp2 LTEQ_TOK exp2
   70     | exp2 COMPARE_TOK exp2
   71     | exp2 NOT_EQ_TOK exp2
   72     | exp2

   73 exp: ID_TOK EQ_TOK exp2
   74    | ID_TOK PLUS_EQ_TOK exp2
   75    | ID_TOK MINUS_EQ_TOK exp2
   76    | ID_TOK MULT_EQ_TOK exp2
   77    | ID_TOK DIVIDE_EQ_TOK exp2
   78    | ID_TOK MOD_EQ_TOK exp2
   79    | exp0

   80 exp2: LPAREN_TOK exp2 RPAREN_TOK
   81     | exp1 PLUS_TOK exp2
   82     | exp1 MINUS_TOK exp2
   83     | exp1

   84 exp1: var MULT_TOK exp1
   85     | var DIVIDE_TOK exp1
   86     | var MOD_TOK exp1
   87     | var
   88     | exp0
   89     | funccall

   90 exp0: ID_TOK PLUS_PLUS_TOK
   91     | ID_TOK MINUS_MINUS_TOK
   92     | PLUS_PLUS_TOK ID_TOK
   93     | MINUS_MINUS_TOK ID_TOK

   94 var: ID_TOK
   95    | INTCONST
   96    | DOUBLECONST
   97    | CHARCONST


Terminals, with rules where they appear

$end (0) 0
error (256)
LPAREN_TOK (258) 12 13 19 45 59 60 65 80
RPAREN_TOK (259) 12 13 19 45 59 60 65 80
CURL_LPAREN_TOK (260) 22 23
CURL_RPAREN_TOK (261) 22 23
DEFINE_TOK (262)
EQ_TOK (263) 8 10 49 50 73
GT_TOK (264) 67
LT_TOK (265) 66
MINUS_TOK (266) 82
PLUS_TOK (267) 81
MULT_TOK (268) 84
DIVIDE_TOK (269) 85
MOD_TOK (270) 86
XOR_TOK (271)
NOT_TOK (272) 63
AND_TOK (273) 62
OR_TOK (274) 61
SEMICOLON_TOK (275) 7 8 14 19 24 30 35 48 50 51 52
COMMA_TOK (276) 9 10 17 18 20 49 53 57
WHILE_TOK (277) 44
FOR_TOK (278) 45
IF_TOK (279) 40 41
ELSE_TOK (280) 41
ELSEIF_TOK (281) 42
COMPARE_TOK (282) 70
GTEQ_TOK (283) 68
LTEQ_TOK (284) 69
NOT_EQ_TOK (285) 71
BIT_AND_TOK (286)
BIT_OR_TOK (287)
PLUS_EQ_TOK (288) 74
MINUS_EQ_TOK (289) 75
MULT_EQ_TOK (290) 76
DIVIDE_EQ_TOK (291) 77
RIGHT_SHIFT_TOK (292)
LEFT_SHIFT_TOK (293)
MINUS_MINUS_TOK (294) 91 93
PLUS_PLUS_TOK (295) 90 92
MOD_EQ_TOK (296) 78
ID_TOK (297) 7 8 9 10 12 13 15 17 18 19 49 50 73 74 75 76 77 78 90
    91 92 93 94
INTCONST (298) 95
ERROR_TOK (299)
DOUBLECONST (300) 96
CHARCONST (301) 97
TYPE_TOK (302) 7 8 12 15 17 18
RETURN_TOK (303) 14


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
DEBUG (50)
    on left: 1, on right: 0
START (51)
    on left: 2 3 4, on right: 1 2 3
vardeclines (52)
    on left: 5 6, on right: 5 22 23
vardec (53)
    on left: 7 8, on right: 2 5 47
vardecex (54)
    on left: 9 10 11, on right: 7 8 9 10
funcdef (55)
    on left: 12 13, on right: 3
returnstatement (56)
    on left: 14, on right: 27 33 38
arglist (57)
    on left: 15 16, on right: 12 13
arglistex (58)
    on left: 17 18, on right: 15 17
funccall (59)
    on left: 19, on right: 28 34 39 89
paramlist (60)
    on left: 20 21, on right: 19 20
block (61)
    on left: 22 23, on right: 12 13 29
nonfunctionblock (62)
    on left: 24 25 26 27 28 29, on right: 40 41 42 44 45
statements (63)
    on left: 30 31 32 33 34 35 36 37 38 39, on right: 22 30 31 32 33
    34
ifstatement (64)
    on left: 40 41, on right: 25 31 36
ifstatementex (65)
    on left: 42 43, on right: 40 41 42
loopstatement (66)
    on left: 44 45, on right: 26 32 37
forpart1 (67)
    on left: 46 47 48, on right: 45
varinitlist (68)
    on left: 49 50, on right: 46 49
forpart2 (69)
    on left: 51 52, on right: 45
forpart2ex (70)
    on left: 53 54, on right: 51 53
forpart3 (71)
    on left: 55 56, on right: 45
forpart3ex (72)
    on left: 57 58, on right: 55 57
condexp (73)
    on left: 59, on right: 40 41 42 44
exp4 (74)
    on left: 60 61 62 63 64, on right: 51 53 59 60 61 62 63
exp3 (75)
    on left: 65 66 67 68 69 70 71 72, on right: 61 62 64 65
exp (76)
    on left: 73 74 75 76 77 78 79, on right: 20 21 24 30 35 55 57
exp2 (77)
    on left: 80 81 82 83, on right: 8 10 14 49 50 66 67 68 69 70 71
    72 73 74 75 76 77 78 80 81 82
exp1 (78)
    on left: 84 85 86 87 88 89, on right: 81 82 83 84 85 86
exp0 (79)
    on left: 90 91 92 93, on right: 79 88
var (80)
    on left: 94 95 96 97, on right: 84 85 86 87


State 0

    0 $accept: . DEBUG $end

    ID_TOK    shift, and go to state 1
    TYPE_TOK  shift, and go to state 2

    $default  reduce using rule 4 (START)

    DEBUG    go to state 3
    START    go to state 4
    vardec   go to state 5
    funcdef  go to state 6


State 1

   13 funcdef: ID_TOK . LPAREN_TOK arglist RPAREN_TOK block

    LPAREN_TOK  shift, and go to state 7


State 2

    7 vardec: TYPE_TOK . ID_TOK vardecex SEMICOLON_TOK
    8       | TYPE_TOK . ID_TOK EQ_TOK exp2 vardecex SEMICOLON_TOK
   12 funcdef: TYPE_TOK . ID_TOK LPAREN_TOK arglist RPAREN_TOK block

    ID_TOK  shift, and go to state 8


State 3

    0 $accept: DEBUG . $end

    $end  shift, and go to state 9


State 4

    1 DEBUG: START .

    $default  reduce using rule 1 (DEBUG)


State 5

    2 START: vardec . START

    ID_TOK    shift, and go to state 1
    TYPE_TOK  shift, and go to state 2

    $default  reduce using rule 4 (START)

    START    go to state 10
    vardec   go to state 5
    funcdef  go to state 6


State 6

    3 START: funcdef . START

    ID_TOK    shift, and go to state 1
    TYPE_TOK  shift, and go to state 2

    $default  reduce using rule 4 (START)

    START    go to state 11
    vardec   go to state 5
    funcdef  go to state 6


State 7

   13 funcdef: ID_TOK LPAREN_TOK . arglist RPAREN_TOK block

    TYPE_TOK  shift, and go to state 12

    $default  reduce using rule 16 (arglist)

    arglist  go to state 13


State 8

    7 vardec: TYPE_TOK ID_TOK . vardecex SEMICOLON_TOK
    8       | TYPE_TOK ID_TOK . EQ_TOK exp2 vardecex SEMICOLON_TOK
   12 funcdef: TYPE_TOK ID_TOK . LPAREN_TOK arglist RPAREN_TOK block

    LPAREN_TOK  shift, and go to state 14
    EQ_TOK      shift, and go to state 15

    $default  reduce using rule 11 (vardecex)

    vardecex  go to state 16


State 9

    0 $accept: DEBUG $end .

    $default  accept


State 10

    2 START: vardec START .

    $default  reduce using rule 2 (START)


State 11

    3 START: funcdef START .

    $default  reduce using rule 3 (START)


State 12

   15 arglist: TYPE_TOK . ID_TOK arglistex

    ID_TOK  shift, and go to state 17


State 13

   13 funcdef: ID_TOK LPAREN_TOK arglist . RPAREN_TOK block

    RPAREN_TOK  shift, and go to state 18


State 14

   12 funcdef: TYPE_TOK ID_TOK LPAREN_TOK . arglist RPAREN_TOK block

    TYPE_TOK  shift, and go to state 12

    $default  reduce using rule 16 (arglist)

    arglist  go to state 19


State 15

    8 vardec: TYPE_TOK ID_TOK EQ_TOK . exp2 vardecex SEMICOLON_TOK

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 28
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 16

    7 vardec: TYPE_TOK ID_TOK vardecex . SEMICOLON_TOK
    9 vardecex: vardecex . COMMA_TOK ID_TOK
   10         | vardecex . COMMA_TOK ID_TOK EQ_TOK exp2

    SEMICOLON_TOK  shift, and go to state 32
    COMMA_TOK      shift, and go to state 33


State 17

   15 arglist: TYPE_TOK ID_TOK . arglistex

    COMMA_TOK  shift, and go to state 34

    arglistex  go to state 35


State 18

   13 funcdef: ID_TOK LPAREN_TOK arglist RPAREN_TOK . block

    CURL_LPAREN_TOK  shift, and go to state 36

    block  go to state 37


State 19

   12 funcdef: TYPE_TOK ID_TOK LPAREN_TOK arglist . RPAREN_TOK block

    RPAREN_TOK  shift, and go to state 38


State 20

   80 exp2: LPAREN_TOK . exp2 RPAREN_TOK

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 39
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 21

   93 exp0: MINUS_MINUS_TOK . ID_TOK

    ID_TOK  shift, and go to state 40


State 22

   92 exp0: PLUS_PLUS_TOK . ID_TOK

    ID_TOK  shift, and go to state 41


State 23

   19 funccall: ID_TOK . LPAREN_TOK paramlist RPAREN_TOK SEMICOLON_TOK
   90 exp0: ID_TOK . PLUS_PLUS_TOK
   91     | ID_TOK . MINUS_MINUS_TOK
   94 var: ID_TOK .

    LPAREN_TOK       shift, and go to state 42
    MINUS_MINUS_TOK  shift, and go to state 43
    PLUS_PLUS_TOK    shift, and go to state 44

    $default  reduce using rule 94 (var)


State 24

   95 var: INTCONST .

    $default  reduce using rule 95 (var)


State 25

   96 var: DOUBLECONST .

    $default  reduce using rule 96 (var)


State 26

   97 var: CHARCONST .

    $default  reduce using rule 97 (var)


State 27

   89 exp1: funccall .

    $default  reduce using rule 89 (exp1)


State 28

    8 vardec: TYPE_TOK ID_TOK EQ_TOK exp2 . vardecex SEMICOLON_TOK

    $default  reduce using rule 11 (vardecex)

    vardecex  go to state 45


State 29

   81 exp2: exp1 . PLUS_TOK exp2
   82     | exp1 . MINUS_TOK exp2
   83     | exp1 .

    MINUS_TOK  shift, and go to state 46
    PLUS_TOK   shift, and go to state 47

    $default  reduce using rule 83 (exp2)


State 30

   88 exp1: exp0 .

    $default  reduce using rule 88 (exp1)


State 31

   84 exp1: var . MULT_TOK exp1
   85     | var . DIVIDE_TOK exp1
   86     | var . MOD_TOK exp1
   87     | var .

    MULT_TOK    shift, and go to state 48
    DIVIDE_TOK  shift, and go to state 49
    MOD_TOK     shift, and go to state 50

    $default  reduce using rule 87 (exp1)


State 32

    7 vardec: TYPE_TOK ID_TOK vardecex SEMICOLON_TOK .

    $default  reduce using rule 7 (vardec)


State 33

    9 vardecex: vardecex COMMA_TOK . ID_TOK
   10         | vardecex COMMA_TOK . ID_TOK EQ_TOK exp2

    ID_TOK  shift, and go to state 51


State 34

   17 arglistex: COMMA_TOK . TYPE_TOK ID_TOK arglistex
   18          | COMMA_TOK . TYPE_TOK ID_TOK

    TYPE_TOK  shift, and go to state 52


State 35

   15 arglist: TYPE_TOK ID_TOK arglistex .

    $default  reduce using rule 15 (arglist)


State 36

   22 block: CURL_LPAREN_TOK . vardeclines statements CURL_RPAREN_TOK
   23      | CURL_LPAREN_TOK . vardeclines CURL_RPAREN_TOK

    $default  reduce using rule 6 (vardeclines)

    vardeclines  go to state 53


State 37

   13 funcdef: ID_TOK LPAREN_TOK arglist RPAREN_TOK block .

    $default  reduce using rule 13 (funcdef)


State 38

   12 funcdef: TYPE_TOK ID_TOK LPAREN_TOK arglist RPAREN_TOK . block

    CURL_LPAREN_TOK  shift, and go to state 36

    block  go to state 54


State 39

   80 exp2: LPAREN_TOK exp2 . RPAREN_TOK

    RPAREN_TOK  shift, and go to state 55


State 40

   93 exp0: MINUS_MINUS_TOK ID_TOK .

    $default  reduce using rule 93 (exp0)


State 41

   92 exp0: PLUS_PLUS_TOK ID_TOK .

    $default  reduce using rule 92 (exp0)


State 42

   19 funccall: ID_TOK LPAREN_TOK . paramlist RPAREN_TOK SEMICOLON_TOK

    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 56

    paramlist  go to state 57
    exp        go to state 58
    exp0       go to state 59


State 43

   91 exp0: ID_TOK MINUS_MINUS_TOK .

    $default  reduce using rule 91 (exp0)


State 44

   90 exp0: ID_TOK PLUS_PLUS_TOK .

    $default  reduce using rule 90 (exp0)


State 45

    8 vardec: TYPE_TOK ID_TOK EQ_TOK exp2 vardecex . SEMICOLON_TOK
    9 vardecex: vardecex . COMMA_TOK ID_TOK
   10         | vardecex . COMMA_TOK ID_TOK EQ_TOK exp2

    SEMICOLON_TOK  shift, and go to state 60
    COMMA_TOK      shift, and go to state 33


State 46

   82 exp2: exp1 MINUS_TOK . exp2

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 61
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 47

   81 exp2: exp1 PLUS_TOK . exp2

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 62
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 48

   84 exp1: var MULT_TOK . exp1

    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp1      go to state 63
    exp0      go to state 30
    var       go to state 31


State 49

   85 exp1: var DIVIDE_TOK . exp1

    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp1      go to state 64
    exp0      go to state 30
    var       go to state 31


State 50

   86 exp1: var MOD_TOK . exp1

    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp1      go to state 65
    exp0      go to state 30
    var       go to state 31


State 51

    9 vardecex: vardecex COMMA_TOK ID_TOK .
   10         | vardecex COMMA_TOK ID_TOK . EQ_TOK exp2

    EQ_TOK  shift, and go to state 66

    $default  reduce using rule 9 (vardecex)


State 52

   17 arglistex: COMMA_TOK TYPE_TOK . ID_TOK arglistex
   18          | COMMA_TOK TYPE_TOK . ID_TOK

    ID_TOK  shift, and go to state 67


State 53

    5 vardeclines: vardeclines . vardec
   22 block: CURL_LPAREN_TOK vardeclines . statements CURL_RPAREN_TOK
   23      | CURL_LPAREN_TOK vardeclines . CURL_RPAREN_TOK

    CURL_RPAREN_TOK  shift, and go to state 68
    WHILE_TOK        shift, and go to state 69
    FOR_TOK          shift, and go to state 70
    IF_TOK           shift, and go to state 71
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 72
    TYPE_TOK         shift, and go to state 73
    RETURN_TOK       shift, and go to state 74

    vardec           go to state 75
    returnstatement  go to state 76
    funccall         go to state 77
    statements       go to state 78
    ifstatement      go to state 79
    loopstatement    go to state 80
    exp              go to state 81
    exp0             go to state 59


State 54

   12 funcdef: TYPE_TOK ID_TOK LPAREN_TOK arglist RPAREN_TOK block .

    $default  reduce using rule 12 (funcdef)


State 55

   80 exp2: LPAREN_TOK exp2 RPAREN_TOK .

    $default  reduce using rule 80 (exp2)


State 56

   73 exp: ID_TOK . EQ_TOK exp2
   74    | ID_TOK . PLUS_EQ_TOK exp2
   75    | ID_TOK . MINUS_EQ_TOK exp2
   76    | ID_TOK . MULT_EQ_TOK exp2
   77    | ID_TOK . DIVIDE_EQ_TOK exp2
   78    | ID_TOK . MOD_EQ_TOK exp2
   90 exp0: ID_TOK . PLUS_PLUS_TOK
   91     | ID_TOK . MINUS_MINUS_TOK

    EQ_TOK           shift, and go to state 82
    PLUS_EQ_TOK      shift, and go to state 83
    MINUS_EQ_TOK     shift, and go to state 84
    MULT_EQ_TOK      shift, and go to state 85
    DIVIDE_EQ_TOK    shift, and go to state 86
    MINUS_MINUS_TOK  shift, and go to state 43
    PLUS_PLUS_TOK    shift, and go to state 44
    MOD_EQ_TOK       shift, and go to state 87


State 57

   19 funccall: ID_TOK LPAREN_TOK paramlist . RPAREN_TOK SEMICOLON_TOK

    RPAREN_TOK  shift, and go to state 88


State 58

   20 paramlist: exp . COMMA_TOK paramlist
   21          | exp .

    COMMA_TOK  shift, and go to state 89

    $default  reduce using rule 21 (paramlist)


State 59

   79 exp: exp0 .

    $default  reduce using rule 79 (exp)


State 60

    8 vardec: TYPE_TOK ID_TOK EQ_TOK exp2 vardecex SEMICOLON_TOK .

    $default  reduce using rule 8 (vardec)


State 61

   82 exp2: exp1 MINUS_TOK exp2 .

    $default  reduce using rule 82 (exp2)


State 62

   81 exp2: exp1 PLUS_TOK exp2 .

    $default  reduce using rule 81 (exp2)


State 63

   84 exp1: var MULT_TOK exp1 .

    $default  reduce using rule 84 (exp1)


State 64

   85 exp1: var DIVIDE_TOK exp1 .

    $default  reduce using rule 85 (exp1)


State 65

   86 exp1: var MOD_TOK exp1 .

    $default  reduce using rule 86 (exp1)


State 66

   10 vardecex: vardecex COMMA_TOK ID_TOK EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 90
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 67

   17 arglistex: COMMA_TOK TYPE_TOK ID_TOK . arglistex
   18          | COMMA_TOK TYPE_TOK ID_TOK .

    COMMA_TOK  shift, and go to state 34

    $default  reduce using rule 18 (arglistex)

    arglistex  go to state 91


State 68

   23 block: CURL_LPAREN_TOK vardeclines CURL_RPAREN_TOK .

    $default  reduce using rule 23 (block)


State 69

   44 loopstatement: WHILE_TOK . condexp nonfunctionblock

    LPAREN_TOK  shift, and go to state 92

    condexp  go to state 93


State 70

   45 loopstatement: FOR_TOK . LPAREN_TOK forpart1 forpart2 forpart3 RPAREN_TOK nonfunctionblock

    LPAREN_TOK  shift, and go to state 94


State 71

   40 ifstatement: IF_TOK . condexp nonfunctionblock ifstatementex
   41            | IF_TOK . condexp nonfunctionblock ifstatementex ELSE_TOK nonfunctionblock

    LPAREN_TOK  shift, and go to state 92

    condexp  go to state 95


State 72

   19 funccall: ID_TOK . LPAREN_TOK paramlist RPAREN_TOK SEMICOLON_TOK
   73 exp: ID_TOK . EQ_TOK exp2
   74    | ID_TOK . PLUS_EQ_TOK exp2
   75    | ID_TOK . MINUS_EQ_TOK exp2
   76    | ID_TOK . MULT_EQ_TOK exp2
   77    | ID_TOK . DIVIDE_EQ_TOK exp2
   78    | ID_TOK . MOD_EQ_TOK exp2
   90 exp0: ID_TOK . PLUS_PLUS_TOK
   91     | ID_TOK . MINUS_MINUS_TOK

    LPAREN_TOK       shift, and go to state 42
    EQ_TOK           shift, and go to state 82
    PLUS_EQ_TOK      shift, and go to state 83
    MINUS_EQ_TOK     shift, and go to state 84
    MULT_EQ_TOK      shift, and go to state 85
    DIVIDE_EQ_TOK    shift, and go to state 86
    MINUS_MINUS_TOK  shift, and go to state 43
    PLUS_PLUS_TOK    shift, and go to state 44
    MOD_EQ_TOK       shift, and go to state 87


State 73

    7 vardec: TYPE_TOK . ID_TOK vardecex SEMICOLON_TOK
    8       | TYPE_TOK . ID_TOK EQ_TOK exp2 vardecex SEMICOLON_TOK

    ID_TOK  shift, and go to state 96


State 74

   14 returnstatement: RETURN_TOK . exp2 SEMICOLON_TOK

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 97
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 75

    5 vardeclines: vardeclines vardec .

    $default  reduce using rule 5 (vardeclines)


State 76

   33 statements: returnstatement . statements
   38           | returnstatement .

    WHILE_TOK        shift, and go to state 69
    FOR_TOK          shift, and go to state 70
    IF_TOK           shift, and go to state 71
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 72
    RETURN_TOK       shift, and go to state 74

    $default  reduce using rule 38 (statements)

    returnstatement  go to state 76
    funccall         go to state 77
    statements       go to state 98
    ifstatement      go to state 79
    loopstatement    go to state 80
    exp              go to state 81
    exp0             go to state 59


State 77

   34 statements: funccall . statements
   39           | funccall .

    WHILE_TOK        shift, and go to state 69
    FOR_TOK          shift, and go to state 70
    IF_TOK           shift, and go to state 71
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 72
    RETURN_TOK       shift, and go to state 74

    $default  reduce using rule 39 (statements)

    returnstatement  go to state 76
    funccall         go to state 77
    statements       go to state 99
    ifstatement      go to state 79
    loopstatement    go to state 80
    exp              go to state 81
    exp0             go to state 59


State 78

   22 block: CURL_LPAREN_TOK vardeclines statements . CURL_RPAREN_TOK

    CURL_RPAREN_TOK  shift, and go to state 100


State 79

   31 statements: ifstatement . statements
   36           | ifstatement .

    WHILE_TOK        shift, and go to state 69
    FOR_TOK          shift, and go to state 70
    IF_TOK           shift, and go to state 71
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 72
    RETURN_TOK       shift, and go to state 74

    $default  reduce using rule 36 (statements)

    returnstatement  go to state 76
    funccall         go to state 77
    statements       go to state 101
    ifstatement      go to state 79
    loopstatement    go to state 80
    exp              go to state 81
    exp0             go to state 59


State 80

   32 statements: loopstatement . statements
   37           | loopstatement .

    WHILE_TOK        shift, and go to state 69
    FOR_TOK          shift, and go to state 70
    IF_TOK           shift, and go to state 71
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 72
    RETURN_TOK       shift, and go to state 74

    $default  reduce using rule 37 (statements)

    returnstatement  go to state 76
    funccall         go to state 77
    statements       go to state 102
    ifstatement      go to state 79
    loopstatement    go to state 80
    exp              go to state 81
    exp0             go to state 59


State 81

   30 statements: exp . SEMICOLON_TOK statements
   35           | exp . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 103


State 82

   73 exp: ID_TOK EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 104
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 83

   74 exp: ID_TOK PLUS_EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 105
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 84

   75 exp: ID_TOK MINUS_EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 106
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 85

   76 exp: ID_TOK MULT_EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 107
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 86

   77 exp: ID_TOK DIVIDE_EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 108
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 87

   78 exp: ID_TOK MOD_EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 109
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 88

   19 funccall: ID_TOK LPAREN_TOK paramlist RPAREN_TOK . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 110


State 89

   20 paramlist: exp COMMA_TOK . paramlist

    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 56

    paramlist  go to state 111
    exp        go to state 58
    exp0       go to state 59


State 90

   10 vardecex: vardecex COMMA_TOK ID_TOK EQ_TOK exp2 .

    $default  reduce using rule 10 (vardecex)


State 91

   17 arglistex: COMMA_TOK TYPE_TOK ID_TOK arglistex .

    $default  reduce using rule 17 (arglistex)


State 92

   59 condexp: LPAREN_TOK . exp4 RPAREN_TOK

    LPAREN_TOK       shift, and go to state 112
    NOT_TOK          shift, and go to state 113
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp4      go to state 114
    exp3      go to state 115
    exp2      go to state 116
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 93

   44 loopstatement: WHILE_TOK condexp . nonfunctionblock

    CURL_LPAREN_TOK  shift, and go to state 36
    WHILE_TOK        shift, and go to state 69
    FOR_TOK          shift, and go to state 70
    IF_TOK           shift, and go to state 71
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 72
    RETURN_TOK       shift, and go to state 74

    returnstatement   go to state 117
    funccall          go to state 118
    block             go to state 119
    nonfunctionblock  go to state 120
    ifstatement       go to state 121
    loopstatement     go to state 122
    exp               go to state 123
    exp0              go to state 59


State 94

   45 loopstatement: FOR_TOK LPAREN_TOK . forpart1 forpart2 forpart3 RPAREN_TOK nonfunctionblock

    SEMICOLON_TOK  shift, and go to state 124
    ID_TOK         shift, and go to state 125
    TYPE_TOK       shift, and go to state 73

    vardec       go to state 126
    forpart1     go to state 127
    varinitlist  go to state 128


State 95

   40 ifstatement: IF_TOK condexp . nonfunctionblock ifstatementex
   41            | IF_TOK condexp . nonfunctionblock ifstatementex ELSE_TOK nonfunctionblock

    CURL_LPAREN_TOK  shift, and go to state 36
    WHILE_TOK        shift, and go to state 69
    FOR_TOK          shift, and go to state 70
    IF_TOK           shift, and go to state 71
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 72
    RETURN_TOK       shift, and go to state 74

    returnstatement   go to state 117
    funccall          go to state 118
    block             go to state 119
    nonfunctionblock  go to state 129
    ifstatement       go to state 121
    loopstatement     go to state 122
    exp               go to state 123
    exp0              go to state 59


State 96

    7 vardec: TYPE_TOK ID_TOK . vardecex SEMICOLON_TOK
    8       | TYPE_TOK ID_TOK . EQ_TOK exp2 vardecex SEMICOLON_TOK

    EQ_TOK  shift, and go to state 15

    $default  reduce using rule 11 (vardecex)

    vardecex  go to state 16


State 97

   14 returnstatement: RETURN_TOK exp2 . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 130


State 98

   33 statements: returnstatement statements .

    $default  reduce using rule 33 (statements)


State 99

   34 statements: funccall statements .

    $default  reduce using rule 34 (statements)


State 100

   22 block: CURL_LPAREN_TOK vardeclines statements CURL_RPAREN_TOK .

    $default  reduce using rule 22 (block)


State 101

   31 statements: ifstatement statements .

    $default  reduce using rule 31 (statements)


State 102

   32 statements: loopstatement statements .

    $default  reduce using rule 32 (statements)


State 103

   30 statements: exp SEMICOLON_TOK . statements
   35           | exp SEMICOLON_TOK .

    WHILE_TOK        shift, and go to state 69
    FOR_TOK          shift, and go to state 70
    IF_TOK           shift, and go to state 71
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 72
    RETURN_TOK       shift, and go to state 74

    $default  reduce using rule 35 (statements)

    returnstatement  go to state 76
    funccall         go to state 77
    statements       go to state 131
    ifstatement      go to state 79
    loopstatement    go to state 80
    exp              go to state 81
    exp0             go to state 59


State 104

   73 exp: ID_TOK EQ_TOK exp2 .

    $default  reduce using rule 73 (exp)


State 105

   74 exp: ID_TOK PLUS_EQ_TOK exp2 .

    $default  reduce using rule 74 (exp)


State 106

   75 exp: ID_TOK MINUS_EQ_TOK exp2 .

    $default  reduce using rule 75 (exp)


State 107

   76 exp: ID_TOK MULT_EQ_TOK exp2 .

    $default  reduce using rule 76 (exp)


State 108

   77 exp: ID_TOK DIVIDE_EQ_TOK exp2 .

    $default  reduce using rule 77 (exp)


State 109

   78 exp: ID_TOK MOD_EQ_TOK exp2 .

    $default  reduce using rule 78 (exp)


State 110

   19 funccall: ID_TOK LPAREN_TOK paramlist RPAREN_TOK SEMICOLON_TOK .

    $default  reduce using rule 19 (funccall)


State 111

   20 paramlist: exp COMMA_TOK paramlist .

    $default  reduce using rule 20 (paramlist)


State 112

   60 exp4: LPAREN_TOK . exp4 RPAREN_TOK
   65 exp3: LPAREN_TOK . exp3 RPAREN_TOK
   80 exp2: LPAREN_TOK . exp2 RPAREN_TOK

    LPAREN_TOK       shift, and go to state 112
    NOT_TOK          shift, and go to state 113
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp4      go to state 132
    exp3      go to state 133
    exp2      go to state 134
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 113

   63 exp4: NOT_TOK . exp4

    LPAREN_TOK       shift, and go to state 112
    NOT_TOK          shift, and go to state 113
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp4      go to state 135
    exp3      go to state 115
    exp2      go to state 116
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 114

   59 condexp: LPAREN_TOK exp4 . RPAREN_TOK

    RPAREN_TOK  shift, and go to state 136


State 115

   61 exp4: exp3 . OR_TOK exp4
   62     | exp3 . AND_TOK exp4
   64     | exp3 .

    AND_TOK  shift, and go to state 137
    OR_TOK   shift, and go to state 138

    $default  reduce using rule 64 (exp4)


State 116

   66 exp3: exp2 . LT_TOK exp2
   67     | exp2 . GT_TOK exp2
   68     | exp2 . GTEQ_TOK exp2
   69     | exp2 . LTEQ_TOK exp2
   70     | exp2 . COMPARE_TOK exp2
   71     | exp2 . NOT_EQ_TOK exp2
   72     | exp2 .

    GT_TOK       shift, and go to state 139
    LT_TOK       shift, and go to state 140
    COMPARE_TOK  shift, and go to state 141
    GTEQ_TOK     shift, and go to state 142
    LTEQ_TOK     shift, and go to state 143
    NOT_EQ_TOK   shift, and go to state 144

    $default  reduce using rule 72 (exp3)


State 117

   27 nonfunctionblock: returnstatement .

    $default  reduce using rule 27 (nonfunctionblock)


State 118

   28 nonfunctionblock: funccall .

    $default  reduce using rule 28 (nonfunctionblock)


State 119

   29 nonfunctionblock: block .

    $default  reduce using rule 29 (nonfunctionblock)


State 120

   44 loopstatement: WHILE_TOK condexp nonfunctionblock .

    $default  reduce using rule 44 (loopstatement)


State 121

   25 nonfunctionblock: ifstatement .

    $default  reduce using rule 25 (nonfunctionblock)


State 122

   26 nonfunctionblock: loopstatement .

    $default  reduce using rule 26 (nonfunctionblock)


State 123

   24 nonfunctionblock: exp . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 145


State 124

   48 forpart1: SEMICOLON_TOK .

    $default  reduce using rule 48 (forpart1)


State 125

   49 varinitlist: ID_TOK . EQ_TOK exp2 COMMA_TOK varinitlist
   50            | ID_TOK . EQ_TOK exp2 SEMICOLON_TOK

    EQ_TOK  shift, and go to state 146


State 126

   47 forpart1: vardec .

    $default  reduce using rule 47 (forpart1)


State 127

   45 loopstatement: FOR_TOK LPAREN_TOK forpart1 . forpart2 forpart3 RPAREN_TOK nonfunctionblock

    LPAREN_TOK       shift, and go to state 112
    NOT_TOK          shift, and go to state 113
    SEMICOLON_TOK    shift, and go to state 147
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    forpart2  go to state 148
    exp4      go to state 149
    exp3      go to state 115
    exp2      go to state 116
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 128

   46 forpart1: varinitlist .

    $default  reduce using rule 46 (forpart1)


State 129

   40 ifstatement: IF_TOK condexp nonfunctionblock . ifstatementex
   41            | IF_TOK condexp nonfunctionblock . ifstatementex ELSE_TOK nonfunctionblock

    ELSEIF_TOK  shift, and go to state 150

    ELSEIF_TOK  [reduce using rule 43 (ifstatementex)]
    $default    reduce using rule 43 (ifstatementex)

    ifstatementex  go to state 151


State 130

   14 returnstatement: RETURN_TOK exp2 SEMICOLON_TOK .

    $default  reduce using rule 14 (returnstatement)


State 131

   30 statements: exp SEMICOLON_TOK statements .

    $default  reduce using rule 30 (statements)


State 132

   60 exp4: LPAREN_TOK exp4 . RPAREN_TOK

    RPAREN_TOK  shift, and go to state 152


State 133

   61 exp4: exp3 . OR_TOK exp4
   62     | exp3 . AND_TOK exp4
   64     | exp3 .
   65 exp3: LPAREN_TOK exp3 . RPAREN_TOK

    RPAREN_TOK  shift, and go to state 153
    AND_TOK     shift, and go to state 137
    OR_TOK      shift, and go to state 138

    RPAREN_TOK  [reduce using rule 64 (exp4)]


State 134

   66 exp3: exp2 . LT_TOK exp2
   67     | exp2 . GT_TOK exp2
   68     | exp2 . GTEQ_TOK exp2
   69     | exp2 . LTEQ_TOK exp2
   70     | exp2 . COMPARE_TOK exp2
   71     | exp2 . NOT_EQ_TOK exp2
   72     | exp2 .
   80 exp2: LPAREN_TOK exp2 . RPAREN_TOK

    RPAREN_TOK   shift, and go to state 55
    GT_TOK       shift, and go to state 139
    LT_TOK       shift, and go to state 140
    COMPARE_TOK  shift, and go to state 141
    GTEQ_TOK     shift, and go to state 142
    LTEQ_TOK     shift, and go to state 143
    NOT_EQ_TOK   shift, and go to state 144

    RPAREN_TOK  [reduce using rule 72 (exp3)]
    $default    reduce using rule 72 (exp3)


State 135

   63 exp4: NOT_TOK exp4 .

    $default  reduce using rule 63 (exp4)


State 136

   59 condexp: LPAREN_TOK exp4 RPAREN_TOK .

    $default  reduce using rule 59 (condexp)


State 137

   62 exp4: exp3 AND_TOK . exp4

    LPAREN_TOK       shift, and go to state 112
    NOT_TOK          shift, and go to state 113
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp4      go to state 154
    exp3      go to state 115
    exp2      go to state 116
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 138

   61 exp4: exp3 OR_TOK . exp4

    LPAREN_TOK       shift, and go to state 112
    NOT_TOK          shift, and go to state 113
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp4      go to state 155
    exp3      go to state 115
    exp2      go to state 116
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 139

   67 exp3: exp2 GT_TOK . exp2

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 156
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 140

   66 exp3: exp2 LT_TOK . exp2

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 157
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 141

   70 exp3: exp2 COMPARE_TOK . exp2

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 158
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 142

   68 exp3: exp2 GTEQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 159
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 143

   69 exp3: exp2 LTEQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 160
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 144

   71 exp3: exp2 NOT_EQ_TOK . exp2

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 161
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 145

   24 nonfunctionblock: exp SEMICOLON_TOK .

    $default  reduce using rule 24 (nonfunctionblock)


State 146

   49 varinitlist: ID_TOK EQ_TOK . exp2 COMMA_TOK varinitlist
   50            | ID_TOK EQ_TOK . exp2 SEMICOLON_TOK

    LPAREN_TOK       shift, and go to state 20
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp2      go to state 162
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 147

   52 forpart2: SEMICOLON_TOK .

    $default  reduce using rule 52 (forpart2)


State 148

   45 loopstatement: FOR_TOK LPAREN_TOK forpart1 forpart2 . forpart3 RPAREN_TOK nonfunctionblock

    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 56

    $default  reduce using rule 56 (forpart3)

    forpart3  go to state 163
    exp       go to state 164
    exp0      go to state 59


State 149

   51 forpart2: exp4 . forpart2ex SEMICOLON_TOK

    COMMA_TOK  shift, and go to state 165

    $default  reduce using rule 54 (forpart2ex)

    forpart2ex  go to state 166


State 150

   42 ifstatementex: ELSEIF_TOK . condexp nonfunctionblock ifstatementex

    LPAREN_TOK  shift, and go to state 92

    condexp  go to state 167


State 151

   40 ifstatement: IF_TOK condexp nonfunctionblock ifstatementex .
   41            | IF_TOK condexp nonfunctionblock ifstatementex . ELSE_TOK nonfunctionblock

    ELSE_TOK  shift, and go to state 168

    ELSE_TOK  [reduce using rule 40 (ifstatement)]
    $default  reduce using rule 40 (ifstatement)


State 152

   60 exp4: LPAREN_TOK exp4 RPAREN_TOK .

    $default  reduce using rule 60 (exp4)


State 153

   65 exp3: LPAREN_TOK exp3 RPAREN_TOK .

    $default  reduce using rule 65 (exp3)


State 154

   62 exp4: exp3 AND_TOK exp4 .

    $default  reduce using rule 62 (exp4)


State 155

   61 exp4: exp3 OR_TOK exp4 .

    $default  reduce using rule 61 (exp4)


State 156

   67 exp3: exp2 GT_TOK exp2 .

    $default  reduce using rule 67 (exp3)


State 157

   66 exp3: exp2 LT_TOK exp2 .

    $default  reduce using rule 66 (exp3)


State 158

   70 exp3: exp2 COMPARE_TOK exp2 .

    $default  reduce using rule 70 (exp3)


State 159

   68 exp3: exp2 GTEQ_TOK exp2 .

    $default  reduce using rule 68 (exp3)


State 160

   69 exp3: exp2 LTEQ_TOK exp2 .

    $default  reduce using rule 69 (exp3)


State 161

   71 exp3: exp2 NOT_EQ_TOK exp2 .

    $default  reduce using rule 71 (exp3)


State 162

   49 varinitlist: ID_TOK EQ_TOK exp2 . COMMA_TOK varinitlist
   50            | ID_TOK EQ_TOK exp2 . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 169
    COMMA_TOK      shift, and go to state 170


State 163

   45 loopstatement: FOR_TOK LPAREN_TOK forpart1 forpart2 forpart3 . RPAREN_TOK nonfunctionblock

    RPAREN_TOK  shift, and go to state 171


State 164

   55 forpart3: exp . forpart3ex

    COMMA_TOK  shift, and go to state 172

    $default  reduce using rule 58 (forpart3ex)

    forpart3ex  go to state 173


State 165

   53 forpart2ex: COMMA_TOK . exp4 forpart2ex

    LPAREN_TOK       shift, and go to state 112
    NOT_TOK          shift, and go to state 113
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 23
    INTCONST         shift, and go to state 24
    DOUBLECONST      shift, and go to state 25
    CHARCONST        shift, and go to state 26

    funccall  go to state 27
    exp4      go to state 174
    exp3      go to state 115
    exp2      go to state 116
    exp1      go to state 29
    exp0      go to state 30
    var       go to state 31


State 166

   51 forpart2: exp4 forpart2ex . SEMICOLON_TOK

    SEMICOLON_TOK  shift, and go to state 175


State 167

   42 ifstatementex: ELSEIF_TOK condexp . nonfunctionblock ifstatementex

    CURL_LPAREN_TOK  shift, and go to state 36
    WHILE_TOK        shift, and go to state 69
    FOR_TOK          shift, and go to state 70
    IF_TOK           shift, and go to state 71
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 72
    RETURN_TOK       shift, and go to state 74

    returnstatement   go to state 117
    funccall          go to state 118
    block             go to state 119
    nonfunctionblock  go to state 176
    ifstatement       go to state 121
    loopstatement     go to state 122
    exp               go to state 123
    exp0              go to state 59


State 168

   41 ifstatement: IF_TOK condexp nonfunctionblock ifstatementex ELSE_TOK . nonfunctionblock

    CURL_LPAREN_TOK  shift, and go to state 36
    WHILE_TOK        shift, and go to state 69
    FOR_TOK          shift, and go to state 70
    IF_TOK           shift, and go to state 71
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 72
    RETURN_TOK       shift, and go to state 74

    returnstatement   go to state 117
    funccall          go to state 118
    block             go to state 119
    nonfunctionblock  go to state 177
    ifstatement       go to state 121
    loopstatement     go to state 122
    exp               go to state 123
    exp0              go to state 59


State 169

   50 varinitlist: ID_TOK EQ_TOK exp2 SEMICOLON_TOK .

    $default  reduce using rule 50 (varinitlist)


State 170

   49 varinitlist: ID_TOK EQ_TOK exp2 COMMA_TOK . varinitlist

    ID_TOK  shift, and go to state 125

    varinitlist  go to state 178


State 171

   45 loopstatement: FOR_TOK LPAREN_TOK forpart1 forpart2 forpart3 RPAREN_TOK . nonfunctionblock

    CURL_LPAREN_TOK  shift, and go to state 36
    WHILE_TOK        shift, and go to state 69
    FOR_TOK          shift, and go to state 70
    IF_TOK           shift, and go to state 71
    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 72
    RETURN_TOK       shift, and go to state 74

    returnstatement   go to state 117
    funccall          go to state 118
    block             go to state 119
    nonfunctionblock  go to state 179
    ifstatement       go to state 121
    loopstatement     go to state 122
    exp               go to state 123
    exp0              go to state 59


State 172

   57 forpart3ex: COMMA_TOK . exp forpart3ex

    MINUS_MINUS_TOK  shift, and go to state 21
    PLUS_PLUS_TOK    shift, and go to state 22
    ID_TOK           shift, and go to state 56

    exp   go to state 180
    exp0  go to state 59


State 173

   55 forpart3: exp forpart3ex .

    $default  reduce using rule 55 (forpart3)


State 174

   53 forpart2ex: COMMA_TOK exp4 . forpart2ex

    COMMA_TOK  shift, and go to state 165

    $default  reduce using rule 54 (forpart2ex)

    forpart2ex  go to state 181


State 175

   51 forpart2: exp4 forpart2ex SEMICOLON_TOK .

    $default  reduce using rule 51 (forpart2)


State 176

   42 ifstatementex: ELSEIF_TOK condexp nonfunctionblock . ifstatementex

    ELSEIF_TOK  shift, and go to state 150

    ELSEIF_TOK  [reduce using rule 43 (ifstatementex)]
    $default    reduce using rule 43 (ifstatementex)

    ifstatementex  go to state 182


State 177

   41 ifstatement: IF_TOK condexp nonfunctionblock ifstatementex ELSE_TOK nonfunctionblock .

    $default  reduce using rule 41 (ifstatement)


State 178

   49 varinitlist: ID_TOK EQ_TOK exp2 COMMA_TOK varinitlist .

    $default  reduce using rule 49 (varinitlist)


State 179

   45 loopstatement: FOR_TOK LPAREN_TOK forpart1 forpart2 forpart3 RPAREN_TOK nonfunctionblock .

    $default  reduce using rule 45 (loopstatement)


State 180

   57 forpart3ex: COMMA_TOK exp . forpart3ex

    COMMA_TOK  shift, and go to state 172

    $default  reduce using rule 58 (forpart3ex)

    forpart3ex  go to state 183


State 181

   53 forpart2ex: COMMA_TOK exp4 forpart2ex .

    $default  reduce using rule 53 (forpart2ex)


State 182

   42 ifstatementex: ELSEIF_TOK condexp nonfunctionblock ifstatementex .

    $default  reduce using rule 42 (ifstatementex)


State 183

   57 forpart3ex: COMMA_TOK exp forpart3ex .

    $default  reduce using rule 57 (forpart3ex)
